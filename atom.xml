<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog for ZJ Xue</title>
  
  <subtitle>编程 日志 杂谈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-11-30T12:10:20.814Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZJ Xue</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>置顶-达瓦里希戳这里</title>
    <link href="http://yoursite.com/2099/12/31/readme/"/>
    <id>http://yoursite.com/2099/12/31/readme/</id>
    <published>2099-12-31T15:59:59.000Z</published>
    <updated>2021-11-30T12:10:20.814Z</updated>
    
    <content type="html"><![CDATA[<h1>读文须知</h1><ul><li>欢迎来到我的博客主站，目前暂时停更，博文更新请前往<a href="https://github.com/bladeXue/blog" target="_blank" rel="noopener">bladeXue/blog</a></li><li>博文内容可能包括出版物的摘录，开源项目的代码片段，各类技术博文的参考等，如有侵权现象发生，请在评论区，项目issue或者邮件bb我</li><li>如果发现有错误或者笔误，同样可以通过邮件/评论/issue来bb我（本博评论系统用的Disqus，现在访问需要梯子，看不见评论区的旁友记得找个机场）</li><li>游戏玩家可以找我打山口山或者守望先锋，id提斯雷尔#5596，专业金色天使</li></ul><a id="more"></a><img src="/images/avatar/sombra4.jpg" title="sombra" alt="sombra" style="max-width:20%;margin:auto;" />]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;读文须知&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;欢迎来到我的博客主站，目前暂时停更，博文更新请前往&lt;a href=&quot;https://github.com/bladeXue/blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bladeXue/blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;博文内容可能包括出版物的摘录，开源项目的代码片段，各类技术博文的参考等，如有侵权现象发生，请在评论区，项目issue或者邮件bb我&lt;/li&gt;
&lt;li&gt;如果发现有错误或者笔误，同样可以通过邮件/评论/issue来bb我（本博评论系统用的Disqus，现在访问需要梯子，看不见评论区的旁友记得找个机场）&lt;/li&gt;
&lt;li&gt;游戏玩家可以找我打山口山或者守望先锋，id提斯雷尔#5596，专业金色天使&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>x86汇编指南-导读</title>
    <link href="http://yoursite.com/2020/11/24/asm/x86-assembly-guide/"/>
    <id>http://yoursite.com/2020/11/24/asm/x86-assembly-guide/</id>
    <published>2020-11-23T17:07:55.000Z</published>
    <updated>2021-07-22T01:19:58.368Z</updated>
    
    <content type="html"><![CDATA[<h1>x86汇编指南-导读</h1><h4 id="关于本篇">关于本篇</h4><p>本文是我写的一系列关于x86架构下，CPU的保护模式和汇编原理相关的博客的导读，这些博客相互独立，但是为了方便阅读和索引，我在这里做了个目录。这些博客没有过度深究汇编器实现的具体细节，而是借由编写实例汇编代码，演示32位和64位的x86处理器下的诸多功能和行为，以及在处理器框架下，现代操作系统内核的一些细节和设计</p><a id="more"></a><p>我选用的汇编器是<a href="https://www.nasm.us/" target="_blank" rel="noopener">NASM</a>，一个很有名的跨平台x86汇编器，所有的代码都在Ubuntu Server 20下运行通过了</p><h4 id="安装环境">安装环境</h4><ul><li>安装NASM</li><li>安装GNU编译工具</li></ul><h4 id="前置知识">前置知识</h4><p>不面向完全新手，最好有一些C的基础，不然很难理解</p><ul><li>基础硬件，处理器和不同处理器的差异</li><li>内存模型，大端小端，反码补码</li><li>调试技术</li><li>8086实模式保护模式，寻址和外设</li><li>编译流程</li><li>必要的内核知识</li></ul><h4 id="汇编速成3篇">汇编速成3篇</h4><p>主要是快速入门，消除恐惧，看看到底是什么东西，具体的各个细节我放到例子里了</p><ol><li>速成</li><li>控制流和子程序</li><li>宏和标准宏</li></ol><h4 id="例子">例子</h4><p>以下实例帮助了解nasm的各个方面，建议顺序阅读，也可以单篇阅读（我每篇都针对额外知识点做了link和讲解）</p><p>部分来自官方文档，部分来自自己代码</p><blockquote><p>一般篇15</p></blockquote><ul><li>hello</li><li>模块化</li><li>调用规范和c联动</li><li>系统调用</li><li>命令行参数</li><li>ld的使用</li><li>fib和递归结构的数学基础</li><li>强大的宏，处理字符串</li><li>简单驱动</li><li>数学计算，主要是浮点数</li><li>并行和饱和计算</li><li>局部变量和栈帧</li><li>编写跨平台代码</li><li>同时使用gas和nasm，看二进制差异</li><li>make的使用和条件编译</li></ul><blockquote><p>os专篇8</p></blockquote><ul><li>学习使用qemu</li><li>mbr</li><li>使用nasm操作grub</li><li>cpu的任务模型和多任务实现</li><li>简单的显示驱动</li><li>页表深究</li><li>可执行文件深究和elf</li><li>初识缓存技术</li></ul><blockquote><p>安全专篇3</p></blockquote><ul><li>shellcode的编写</li><li>溢出漏洞模型</li><li>调试汇编和逆向工程</li></ul><h4 id="进阶知识">进阶知识</h4><ul><li>纯nasm编写一个程序</li><li>hurlex内核</li><li>改写xv6</li><li>阅读NASM文档</li><li>阅读Intel文档</li></ul><h4 id="速查表">速查表</h4><p>一个link，指向自己写的简易wiki</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;x86汇编指南-导读&lt;/h1&gt;
&lt;h4 id=&quot;关于本篇&quot;&gt;关于本篇&lt;/h4&gt;
&lt;p&gt;本文是我写的一系列关于x86架构下，CPU的保护模式和汇编原理相关的博客的导读，这些博客相互独立，但是为了方便阅读和索引，我在这里做了个目录。这些博客没有过度深究汇编器实现的具体细节，而是借由编写实例汇编代码，演示32位和64位的x86处理器下的诸多功能和行为，以及在处理器框架下，现代操作系统内核的一些细节和设计&lt;/p&gt;
    
    </summary>
    
    
      <category term="汇编" scheme="http://yoursite.com/categories/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="x86" scheme="http://yoursite.com/tags/x86/"/>
    
      <category term="汇编" scheme="http://yoursite.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>动态规划专栏-导读</title>
    <link href="http://yoursite.com/2020/09/17/algorithm/dynamic-programming/dynamic-programming-guide/"/>
    <id>http://yoursite.com/2020/09/17/algorithm/dynamic-programming/dynamic-programming-guide/</id>
    <published>2020-09-17T05:13:55.000Z</published>
    <updated>2021-07-22T01:19:58.364Z</updated>
    
    <content type="html"><![CDATA[<h1>动态规划专栏-导读</h1><h4 id="什么是动态规划">什么是动态规划</h4><h4 id="初识动态规划">初识动态规划</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;动态规划专栏-导读&lt;/h1&gt;
&lt;h4 id=&quot;什么是动态规划&quot;&gt;什么是动态规划&lt;/h4&gt;
&lt;h4 id=&quot;初识动态规划&quot;&gt;初识动态规划&lt;/h4&gt;

      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划专栏" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Dijkstra算法</title>
    <link href="http://yoursite.com/2020/09/05/algorithm/data-structure/graph-theory/graph-theory-dijkstra-algorithm/"/>
    <id>http://yoursite.com/2020/09/05/algorithm/data-structure/graph-theory/graph-theory-dijkstra-algorithm/</id>
    <published>2020-09-05T13:18:22.000Z</published>
    <updated>2021-07-22T01:19:58.362Z</updated>
    
    <content type="html"><![CDATA[<h1>Dijkstra算法求解最短路径问题</h1><blockquote><p>Dijkstra算法使用类似BFS的方法解决赋权图的单源最短路径问题<br>Dijkstra算法使用贪心策略和动态规划<br>作者名字很难念</p></blockquote><a id="more"></a><h4 id="最短路径问题">最短路径问题</h4><p><strong>最短路径问题</strong>是图论中的一个非常经典且历史悠久的问题，其目的在于找出某个图结构中的两顶点之间的最短路径</p><p>最短路径问题拥有4种常见形式，每种都有自己的算法：</p><h4 id="施工中…">施工中…</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Dijkstra算法求解最短路径问题&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Dijkstra算法使用类似BFS的方法解决赋权图的单源最短路径问题&lt;br&gt;
Dijkstra算法使用贪心策略和动态规划&lt;br&gt;
作者名字很难念&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图论专栏" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE%E8%AE%BA%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>图的搜索算法</title>
    <link href="http://yoursite.com/2020/09/04/algorithm/data-structure/graph-theory/graph-theory-search/"/>
    <id>http://yoursite.com/2020/09/04/algorithm/data-structure/graph-theory/graph-theory-search/</id>
    <published>2020-09-04T06:10:24.000Z</published>
    <updated>2021-07-22T01:19:58.363Z</updated>
    
    <content type="html"><![CDATA[<h1>图的深度优先搜索和广度优先搜索</h1><blockquote><p>搜索问题是图的众多算法中最核心最重要的，几乎所有图论算法都依赖图的搜索<br>图的搜索算法是判定连通性的重要工具</p></blockquote><a id="more"></a><blockquote><p>本文是系列文章的其中一篇，关于前后文请参见<a href="https://bladexue.github.io/2020/08/25/algorithm/data-structure/graph-theory-guide/" target="_blank" rel="noopener">图论专栏-导读</a></p></blockquote><h4 id="图的搜索问题">图的搜索问题</h4><p>图的搜索问题是图论的<strong>最基本问题</strong>，如果不能有效访问数据，那么数据结构将毫无意义，所谓的算法也会成为空谈，所以必须有一种有效的算法来搜索图所持有的数据。给定一个图，按照某种搜索方法，<strong>沿着图中的边对图中的所有顶点访问一次且仅访问一次</strong>，称为图的<strong>遍历</strong></p><p>图的搜索算法主要有两种：<strong>深度优先搜索</strong>（Depth-First-Search，简称<strong>DFS</strong>）和<strong>广度优先搜索</strong>（Breadth-First-Search，简称<strong>BFS</strong>）</p><p>无论是深度优先搜索还是广度优先搜索，几乎所有的图论搜索算法都属于一种叫做<strong>优先级搜索</strong>的抽象策略。在<a href="https://bladexue.github.io/2020/08/19/algorithm/data-structure/graph-theory/graph-theory-storage-structure/" target="_blank" rel="noopener">图的存储结构及封装</a>一文中，我们通过检查当前顶点的所有连通边（也就是<code>adj()</code>方法），来获取各类性质，在搜索算法中，我们的想法是沿着某顶点的连通边，过渡到下一个顶点，从而达到搜索整个图的目的。对BFS来说，其优先考虑最早发现的顶点（先扫描离起点近的），而DFS则关注最后发现的顶点</p><blockquote><p>注意树其实是一种特殊的图，所以图的搜索和树的搜索很相似，DFS类似树的先序遍历，BFS类似树的中序遍历</p></blockquote><blockquote><p>从辅助结构的选型上讲，DFS和BFS其实是记录型结构（栈）和缓冲型结构（队列）的不同实现</p></blockquote><h4 id="深度优先搜索">深度优先搜索</h4><p>深度优先是一种回溯性算法，其本质结构是栈构成的记录型结构，常规实现是通过递归，在给出代码之前，我们可以看一个小故事</p><h6 id="迷宫问题">迷宫问题</h6><p>迷宫问题是一个希腊神话的古老遗产，讲的是米诺斯国王为了囚禁儿子，一个半人半牛怪物的弥诺陶洛斯所建造的一座无法逃出的监牢。假设把你丢进了迷宫，那么摆在你面前只有两个下场，被迷宫困住，去见马克思，或者寻找一种方式，逃出生天。最经典的走迷宫方法是“绳子策略”：</p><ol><li>准备一根绳子，绳子的一端放在你的起点，另一端抓在你的手里</li><li>准备一支粉笔，走过的路都做上标记</li><li>遇到岔路时，挑选一个没有标记的路走进去</li><li>如果继续遇到岔路，重复3；如果遇到死胡同，则顺着绳子回到上一个岔路，重复3</li><li>如果返回的岔路口的所有路都做过了标记（全是死胡同），则顺着绳子继续回到上一个岔路</li></ol><p>在这个策略里，绳子保证了遇到死胡同时可以找到回去的路，而标记保证了你不会重复进去一条已经走过的死胡同，于是在你不断地尝试各个路径，并在失败后使用绳子<strong>回溯</strong>的过程中，你尽可能尝试了尽可能多的路径，并最终<strong>找到出口</strong>逃出生天，或者尝试了<strong>所有路径</strong>，发现没有出口（太惨了）。</p><h6 id="深度优先搜索算法">深度优先搜索算法</h6><p>到此为止，深度优先遍历的核心策略已经出来了，为了实现DFS，我们需要：</p><ol><li>一根绳子：一个记录型结构，这个FIFO很显然就是栈结构</li><li>一支粉笔：一张表（数组或者散列），用来标记每条边是否已经访问。我们走迷宫时最担心的不是找不到出口，而是绕圈圈，走重复的路径，搜索图时一样，就怕加入了回路变成出不去的死循环，“粉笔”就是用来做这个的关键机构</li><li>一点耐心：每次都尝试走尽可能远的路径，直到找到出口，或者碰壁回溯</li></ol><p>因为我们采用递归结构来实现DFS，递归算法天然持有一个<a href="https://zh.wikipedia.org/wiki/%E8%B0%83%E7%94%A8%E6%A0%88" target="_blank" rel="noopener">栈</a>（函数调用和返回的机制和绳子回溯的作用类似），所以我们只需要一个<strong>marked[]数组</strong>来标记，下来来看一个完整的例子：</p><ol><li>我们建立了一个简单的迷宫，我们将其连通模型，抽象成一个6个顶点和8条边的的无向图</li></ol><img src="/images/algorithm/map/search/dfs.png" title="dfs" alt="dfs" style="max-width:60%;margin:auto;" /><ol start="2"><li>我们的任务是从<code>顶点0</code>出发，使用DFS访问所有的顶点</li></ol><img src="/images/algorithm/map/search/dfs1.png" title="dfs1" alt="dfs1" style="max-width:30%;margin:auto;" /><ol start="3"><li>从<code>顶点0</code>出发，未访问边3条，通过<code>(0,2)</code>访问<code>顶点2</code>，访问过的顶点和边被我标记了赭红色（邻接点的访问是随机的）</li></ol><img src="/images/algorithm/map/search/dfs2.png" title="dfs2" alt="dfs2" style="max-width:30%;margin:auto;" /><ol start="4"><li>从<code>顶点2</code>出发，未访问边3条，通过<code>(1,2)</code>访问<code>顶点1</code></li></ol><img src="/images/algorithm/map/search/dfs3.png" title="dfs3" alt="dfs3" style="max-width:30%;margin:auto;" /><ol start="5"><li>从<code>顶点1</code>出发，未访问边1条，通过<code>(0,1)</code>访问<code>顶点0</code></li></ol><img src="/images/algorithm/map/search/dfs4.png" title="dfs4" alt="dfs4" style="max-width:30%;margin:auto;" /><blockquote><p>此时发现<code>顶点0</code>已被标记，且<code>顶点1</code>已无可访问边，回退到<code>顶点2</code></p></blockquote><ol start="6"><li>从<code>顶点2</code>出发，未访问边2条，通过<code>(2,3)</code>访问<code>顶点3</code></li></ol><img src="/images/algorithm/map/search/dfs5.png" title="dfs5" alt="dfs5" style="max-width:30%;margin:auto;" /><ol start="7"><li>从<code>顶点3</code>出发，未访问边2条，通过<code>(3,5)</code>访问<code>顶点5</code></li></ol><img src="/images/algorithm/map/search/dfs6.png" title="dfs6" alt="dfs6" style="max-width:30%;margin:auto;" /><ol start="8"><li>从<code>顶点5</code>出发，未访问边1条，通过<code>(0,5)</code>访问<code>顶点0</code></li></ol><img src="/images/algorithm/map/search/dfs7.png" title="dfs7" alt="dfs7" style="max-width:30%;margin:auto;" /><blockquote><p>此时发现<code>顶点0</code>已被标记，且<code>顶点5</code>已无可访问边，回退到<code>顶点3</code></p></blockquote><ol start="9"><li>从<code>顶点3</code>出发，未访问边1条，通过<code>(3,4)</code>访问<code>顶点4</code></li></ol><img src="/images/algorithm/map/search/dfs8.png" title="dfs8" alt="dfs8" style="max-width:30%;margin:auto;" /><blockquote><p>所有顶点被访问，遍历结束</p></blockquote><h6 id="生成树和生成森林">生成树和生成森林</h6><p>在DFS的过程中，我们会得到一棵遍历树，称为<strong>深度优先生成树</strong>（希望你还记得生成树的定义），图的DFS遍历树的先序遍历序列和其DFS序列是一致的，本例中的DFS生成树如下，它的遍历序列是<code>[0,2,1,3,5,4]</code>，和图的DFS序列一致：</p><img src="/images/algorithm/map/search/dfs_tree.png" title="dfs_tree" alt="dfs_tree" style="max-width:60%;margin:auto;" /><p>值得一提的是，深度遍历生成树不是唯一的，其受存储结构的影响（邻接矩阵的生成树是唯一的，但邻接表不是，因为邻接表的邻接点无序），下面是本例的另一种DFS生成树：</p><img src="/images/algorithm/map/search/dfs_tree2.png" title="dfs_tree2" alt="dfs_tree2" style="max-width:60%;margin:auto;" /><blockquote><p>这里看到了经典的DFS轨迹图形，也就是所谓的“一棍子捅到底”，可以清晰看出，只要条件合适，DFS算法会尽可能深入地尝试一条路径</p></blockquote><h6 id="在非连通图中的例子">在非连通图中的例子</h6><p>上面的例子是一个无向的连通图，如果遇到非连通图，其实也是一样的，把它的几个连通分量抓出来，看作一个独立的连通图，使用DFS输出后，获得一个生成森林：</p><img src="/images/algorithm/map/search/dfs_tree3.png" title="dfs_tree3" alt="dfs_tree3" style="max-width:95%;margin:auto;" /><h6 id="在有向图中的例子">在有向图中的例子</h6><p>有向图的DFS和无向图的DFS没有区别，只是有向图更容易遇到“死胡同”（因为强连通性可没那么好满足），从而很容易遍历到一半断片了，完了最后是一个生成森林。示例如下：</p><img src="/images/algorithm/map/search/dfs_tree4.png" title="dfs_tree4" alt="dfs_tree4" style="max-width:70%;margin:auto;" /><blockquote><p>DFS本质是一样的，没有区别</p></blockquote><h6 id="代码实现">代码实现</h6><p>代码已经上传<a href="https://github.com/bladeXue/graph-algorithm-kit/tree/master/code/graph-algorithm-kit" target="_blank" rel="noopener">graph-algorithm-kit</a>，用的存储结构的那套代码，方便和上一篇博客联系（其实是作者偷懒），可以配合本节阅读，为了节约篇幅，本篇只贴出核心部分</p><p>按照我们在<a href="https://bladexue.github.io/2020/08/19/algorithm/data-structure/graph-theory/graph-theory-storage-structure/#%E5%9B%BE%E7%9A%84%E5%B0%81%E8%A3%85%E5%92%8C%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener">图结构的封装</a>一节中的做法，依旧是采用<code>Graph</code>+<code>ListGraph</code>的分离式设计，应用代码都放在工具类<code>Graphs</code>里。这里是<code>Graphs</code>中关于DFS的两个主要方法：<strong>深度优先搜索DepthFirstSearch</strong>和<strong>深度优先遍历DepthFirstTraverse</strong>，主体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Graphs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判定通路src-&gt;tar是否存在，可达则返回true</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">depthFirstSearch</span><span class="params">(Graph graph, Integer src, Integer tar)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断顶点越界</span></span><br><span class="line">        validateVertex(src,graph);</span><br><span class="line">        validateVertex(tar,graph);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// DFS</span></span><br><span class="line">        List&lt;Integer&gt; marked = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        dfs(graph,marked,src);</span><br><span class="line">        <span class="keyword">return</span> marked.contains(tar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer[]&gt; depthFirstTraverse(Graph graph, Integer src) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断顶点越界</span></span><br><span class="line">        validateVertex(src, graph);</span><br><span class="line">        <span class="comment">// 如果起点src为空，默认为顶点0出发</span></span><br><span class="line">        <span class="keyword">int</span> first = Objects.requireNonNullElse(src, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结果集（我们的结果很有可能是一个生成森林，所以使用二维表）</span></span><br><span class="line">        List&lt;Integer[]&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置标记集</span></span><br><span class="line">        List&lt;Integer&gt; marked = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 优先访问起点，再访问其它顶点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i &lt; first + graph.V(); i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> n = i % graph.V();</span><br><span class="line">            <span class="keyword">if</span> (!marked.contains(n)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> boundary = marked.size();</span><br><span class="line">                dfs(graph, marked, n);</span><br><span class="line"></span><br><span class="line">                Integer[] buf = <span class="keyword">new</span> Integer[marked.size() - boundary];</span><br><span class="line">                marked.subList(boundary, marked.size()).toArray(buf);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 每次都只将新加入的结点写入数组，boundary就是标记新顶点用的</span></span><br><span class="line">                results.add(buf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Graph graph, List&lt;Integer&gt; marked, Integer v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 标记顶点</span></span><br><span class="line">        marked.add(v);</span><br><span class="line">        <span class="comment">// 递归访问未标记顶点</span></span><br><span class="line">        <span class="keyword">for</span> (Integer i : graph.adj(v))</span><br><span class="line">            <span class="keyword">if</span> (!marked.contains(i))</span><br><span class="line">                dfs(graph, marked, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判定顶点合法性的工具函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validateVertex</span><span class="params">(<span class="keyword">int</span> v, Graph graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= graph.V()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"vertex "</span> + v + <span class="string">" is not between 0 and "</span> + (graph.V() - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例1，对一个无向图进行遍历和搜索：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGraphDFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造无向图</span></span><br><span class="line">        Graph graph = <span class="keyword">new</span> ListGraph(<span class="number">6</span>);</span><br><span class="line">        graph.addEdge(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        graph.addEdge(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        graph.addEdge(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        graph.addEdge(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">        graph.addEdge(<span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">        graph.addEdge(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        graph.addEdge(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从顶点0出发</span></span><br><span class="line">        List&lt;Integer[]&gt; res = Graphs.depthFirstTraverse(graph, <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"the forest from 0: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer[] is : res) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(is));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从顶点4出发</span></span><br><span class="line">        List&lt;Integer[]&gt; res1 = Graphs.depthFirstTraverse(graph, <span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">"the forest from 4: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer[] is : res1) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(is));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 验证可达路径&lt;1,5&gt;</span></span><br><span class="line">        System.out.println(<span class="string">"the path 1-&gt;5: "</span> + Graphs.depthFirstSearch(graph, <span class="number">1</span>, <span class="number">5</span>));</span><br><span class="line">        <span class="comment">// 验证可达路径&lt;2,4&gt;</span></span><br><span class="line">        System.out.println(<span class="string">"the path 2-&gt;4: "</span> + Graphs.depthFirstSearch(graph, <span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>the forest from 0:<br>[0, 1, 2, 3, 4, 5]<br>the forest from 4:<br>[4, 2, 0, 1, 5, 3]<br>the path 1-&gt;5: true<br>the path 2-&gt;4: true</p></blockquote><p>这里用的图其实就是上文的迷宫，可以看到从不同顶点出发， 会有不同的结果，但是都获得了一棵生成树，而且我们的迷宫是一个连通图，无论是<code>1-&gt;5</code>还是<code>2-&gt;4</code>都是可达的：</p><img src="/images/algorithm/map/search/dfs_code.png" title="dfs_code" alt="dfs_code" style="max-width:99%;margin:auto;" /><p>测试用例2，对一个非连通的有向图进行遍历和搜索：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDigraphDFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造有向图</span></span><br><span class="line">        Digraph digraph = <span class="keyword">new</span> ListDigraph(<span class="number">8</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从顶点0出发</span></span><br><span class="line">        List&lt;Integer[]&gt; res = Graphs.depthFirstTraverse(digraph, <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"the forest from 0: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer[] is : res) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(is));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从顶点1出发</span></span><br><span class="line">        List&lt;Integer[]&gt; res1 = Graphs.depthFirstTraverse(digraph, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"the forest from 1: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer[] is : res1) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(is));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 验证可达路径&lt;1,6&gt;</span></span><br><span class="line">        System.out.println(<span class="string">"the path 1-&gt;6: "</span> + Graphs.depthFirstSearch(digraph, <span class="number">1</span>, <span class="number">6</span>));</span><br><span class="line">        <span class="comment">// 验证可达路径&lt;1,7&gt;</span></span><br><span class="line">        System.out.println(<span class="string">"the path 1-&gt;7: "</span> + Graphs.depthFirstSearch(digraph, <span class="number">1</span>, <span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>the forest from 0:<br>[0]<br>[1, 2, 6, 5]<br>[3, 7]<br>[4]<br>the forest from 1:<br>[1, 2, 6, 5]<br>[3, 7]<br>[4, 0]<br>the path 1-&gt;6: true<br>the path 1-&gt;7: false</p></blockquote><p>本测试的用例是一个不连通的有向图，有向图的遍历一般比无向图麻烦，因为它的连通条件比无向图苛刻，更容易产生“死胡同”，所以有向图一般都是生成森林，且起点不同对这个森林是有影响的：</p><img src="/images/algorithm/map/search/dfs_code2.png" title="dfs_code2" alt="dfs_code2" style="max-width:99%;margin:auto;" /><blockquote><p>以顶点0为起点和以顶点1为起点，是有区别的，这和我们的算法实现，以及存储结构有关</p></blockquote><h6 id="DFS的时空分析">DFS的时空分析</h6><p>在空间上，DFS虽然只创建了一个标记集，同时自己是一个递归算法，持有一个调用栈，所以空间复杂度为<code>O(|V|)</code></p><p>在时间上，DFS算法的复杂度和其选用的存储结构有关，如果使用的是邻接矩阵，每次调用<code>adj()</code>方法时，需要访问<code>|V|</code>个顶点，所以整体空间复杂度为<code>O(|V|**2)</code>，如果是邻接表存储的图，每次调用<code>adj()</code>方法时，需要访问<code>|E|</code>个顶点，访问所有顶点的时间为<code>O(|V|)</code>，所以邻接表的整体时间消耗为<code>O(|V|+|E|)</code></p><h4 id="广度优先搜索">广度优先搜索</h4><p>看完DFS的例子，相比对图的搜索已经有了一个很好的概念，再来讲BFS（Breadth First Search，广度优先搜索）就很容易了。前文提过，DFS和BFS都采用的优先级策略，DFS关注的是<strong>最后被发现的顶点</strong>，而BFS则是考虑<strong>最早被发现的顶点</strong></p><h6 id="广度优先搜索算法">广度优先搜索算法</h6><p>BFS类似树的层次遍历模型，对于起点v，我们会先依次访问v的“儿子们”（也就是v的邻接点），再依次访问“孙子们”（v的邻接点的邻接点），这种分层次的查找过程，就是<strong>广度优先</strong>。与DFS展现出的“探索性”不一样，BFS更多的是一种<strong>扩散性</strong>（或者说<strong>侵蚀性</strong>），我们一起来看个例子：</p><ol><li>我们依旧构造一个无向图，我们这次从<code>顶点1</code>出发，第1层次为<code>1</code>：</li></ol><img src="/images/algorithm/map/search/bfs.png" title="bfs" alt="bfs" style="max-width:40%;margin:auto;" /><ol start="2"><li>第2层次为<code>0,5</code>：</li></ol><img src="/images/algorithm/map/search/bfs1.png" title="bfs1" alt="bfs1" style="max-width:40%;margin:auto;" /><ol start="3"><li>第3层次为<code>2,4,6</code>：</li></ol><img src="/images/algorithm/map/search/bfs2.png" title="bfs2" alt="bfs2" style="max-width:40%;margin:auto;" /><ol start="4"><li>第4层次为<code>3,7</code>：</li></ol><img src="/images/algorithm/map/search/bfs3.png" title="bfs3" alt="bfs3" style="max-width:40%;margin:auto;" /><ol start="5"><li>和DFS一样，在BFS中，我们最终可以获得一棵BFS生成树：</li></ol><img src="/images/algorithm/map/search/bfs_tree.png" title="bfs_tree" alt="bfs_tree" style="max-width:70%;margin:auto;" /><blockquote><p>BFS生成树的层次遍历和BFS序列是一致的</p></blockquote><h6 id="代码实现-2">代码实现</h6><p>和DFS的代码类似，使用队列作为缓冲结构（这里的缓冲场景指，记忆正在访问的顶点的下一层顶点），而不是栈，所以这里没有递归结构，也没有回退，只有迭代队列，直到遍历整张表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Graphs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 广度优先搜索</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">breadthFirstSearch</span><span class="params">(Graph graph, Integer src, Integer tar)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断顶点越界</span></span><br><span class="line">        validateVertex(src, graph);</span><br><span class="line">        validateVertex(tar, graph);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// BFS</span></span><br><span class="line">        List&lt;Integer&gt; marked = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        bfs(graph, marked, src);</span><br><span class="line">        <span class="keyword">return</span> marked.contains(tar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 广度优先遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer[]&gt; breadthFirstTraverse(Graph graph, Integer src) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断顶点越界</span></span><br><span class="line">        validateVertex(src,graph);</span><br><span class="line">        <span class="comment">// 设置起点</span></span><br><span class="line">        <span class="keyword">int</span> first = Objects.requireNonNullElse(src, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结果集</span></span><br><span class="line">        List&lt;Integer[]&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 标记集        </span></span><br><span class="line">        List&lt;Integer&gt; marked=<span class="keyword">new</span> ArrayList&lt;&gt;(graph.V());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 优先访问起点，再访问其它顶点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i &lt; first + graph.V(); i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> n = i % graph.V();</span><br><span class="line">            <span class="keyword">if</span> (!marked.contains(n)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> boundary = marked.size();</span><br><span class="line">                bfs(graph, marked, n);</span><br><span class="line"></span><br><span class="line">                Integer[] buf = <span class="keyword">new</span> Integer[marked.size() - boundary];</span><br><span class="line">                marked.subList(boundary, marked.size()).toArray(buf);</span><br><span class="line">                results.add(buf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(Graph graph, List&lt;Integer&gt; marked, Integer src)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 直接访问起点，将其标记并置入队列</span></span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        marked.add(src);</span><br><span class="line">        queue.add(src);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代整张图</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer i:graph.adj(queue.poll())) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!marked.contains(i)) &#123;</span><br><span class="line">                    marked.add(i);</span><br><span class="line">                    queue.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判定顶点合法性的工具函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validateVertex</span><span class="params">(<span class="keyword">int</span> v, Graph graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= graph.V()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"vertex "</span> + v + <span class="string">" is not between 0 and "</span> + (graph.V() - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例1，构造一个2个分量的无向图，分别从<code>顶点1</code>和<code>顶点2</code>开始遍历，下面是原图：</p><img src="/images/algorithm/map/search/bfs_code.png" title="bfs_code" alt="bfs_code" style="max-width:70%;margin:auto;" /><p>完整用例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGraphBFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造图</span></span><br><span class="line">        Graph graph = <span class="keyword">new</span> ListGraph(<span class="number">10</span>);</span><br><span class="line">        graph.addEdge(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        graph.addEdge(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        graph.addEdge(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        graph.addEdge(<span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">        graph.addEdge(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">        graph.addEdge(<span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">        graph.addEdge(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">        graph.addEdge(<span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">        graph.addEdge(<span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line">        graph.addEdge(<span class="number">9</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从顶点0出发</span></span><br><span class="line">        List&lt;Integer[]&gt; res = Graphs.breadthFirstTraverse(graph, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"the forest from 1: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer[] is : res) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(is));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从顶点4出发</span></span><br><span class="line">        List&lt;Integer[]&gt; res1 = Graphs.breadthFirstTraverse(graph, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"the forest from 2: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer[] is : res1) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(is));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 验证可达路径&lt;1,5&gt;</span></span><br><span class="line">        System.out.println(<span class="string">"the path 4-&gt;5: "</span> + Graphs.breadthFirstSearch(graph, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">        <span class="comment">// 验证可达路径&lt;2,4&gt;</span></span><br><span class="line">        System.out.println(<span class="string">"the path 1-&gt;9: "</span> + Graphs.breadthFirstSearch(graph, <span class="number">1</span>, <span class="number">9</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>the forest from 1:<br>[1, 0, 5, 4, 2, 6, 3, 7]<br>[8, 9]<br>the forest from 2:<br>[2, 5, 6, 3, 1, 7, 0, 4]<br>[8, 9]<br>the path 4-&gt;5: true<br>the path 1-&gt;9: false</p></blockquote><blockquote><p>看官可以像DFS那节的捕捉图一样，自己画一下BFS的生成森林，体验一下队列是怎么在BFS中起作用的</p></blockquote><p>测试用例2，构造一个2个分量的有向图，分别从<code>顶点0</code>和<code>顶点1</code>开始遍历，下面是原图：</p><img src="/images/algorithm/map/search/bfs_code2.png" title="bfs_code2" alt="bfs_code2" style="max-width:70%;margin:auto;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSearch</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDigraphBFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造有向图</span></span><br><span class="line">        Digraph digraph = <span class="keyword">new</span> ListDigraph(<span class="number">8</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">        digraph.addEdge(<span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从顶点0出发</span></span><br><span class="line">        List&lt;Integer[]&gt; res = Graphs.breadthFirstTraverse(digraph, <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"the forest from 0: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer[] is : res) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(is));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从顶点1出发</span></span><br><span class="line">        List&lt;Integer[]&gt; res1 = Graphs.breadthFirstTraverse(digraph, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"the forest from 1: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer[] is : res1) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(is));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 验证可达路径&lt;1,6&gt;</span></span><br><span class="line">        System.out.println(<span class="string">"the path 1-&gt;6: "</span> + Graphs.breadthFirstSearch(digraph, <span class="number">1</span>, <span class="number">6</span>));</span><br><span class="line">        <span class="comment">// 验证可达路径&lt;1,7&gt;</span></span><br><span class="line">        System.out.println(<span class="string">"the path 1-&gt;7: "</span> + Graphs.breadthFirstSearch(digraph, <span class="number">1</span>, <span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>the forest from 0:<br>[0]<br>[1, 2, 5, 6]<br>[3, 7]<br>[4]<br>the forest from 1:<br>[1, 2, 5, 6]<br>[3, 7]<br>[4, 0]<br>the path 1-&gt;6: true<br>the path 1-&gt;7: false</p></blockquote><p>可以看出，有向图的BFS也是具有差异性的</p><h6 id="BFS的时空分析">BFS的时空分析</h6><p>BFS的时空复杂度和DFS的类似，不过是将辅助结构从栈换成了队列，具体如下：</p><ul><li>DFS的空间复杂度为<code>O(|V|)</code></li><li>采用邻接矩阵的DFS的时间复杂度为<code>O(|V|**2)</code></li><li>采用邻接表的DFS的时间复杂度为<code>O(|V|+|E|)</code></li></ul><h6 id="BFS和单源最短路径问题">BFS和单源最短路径问题</h6><p>设一个非带权图<code>G=(V,E)</code>，其<code>顶点u</code>和<code>顶点v</code>的最短路径<code>d(u,v)</code>为从<code>顶点u</code>和<code>顶点v</code>的所有路径中<strong>最少的边数</strong>，若不存在通路则<code>d(u,v)</code>=<code>∞</code></p><p>使用BFS可以很容易解决单源最短路径问题（单源表示只有一个确定起点和一个确定终点），因为BFS是层次模型，它会按照离起点<strong>由近到远</strong>的优先级来将顶点纳入访问集，观察下面的广度优先生成树：</p><img src="/images/algorithm/map/search/bfs_tree.png" title="bfs_tree" alt="bfs_tree" style="max-width:70%;margin:auto;" /><p>从<code>顶点1</code>和<code>顶点2</code>有4条简单通路，分别是：</p><ol><li><code>1,5,2</code></li><li><code>1,5,6,2</code></li><li><code>1,5,6,3,2</code></li><li><code>1,5,6,7,3,2</code></li></ol><p>由于BFS的策略，<code>1,5,2</code>早于其它路径（比如<code>1,5,6,2</code>）被纳入访问集（也就是会尽可能靠近起点），所以可以在BFS生成树里看到，<code>顶点2</code>在树的第3层，只要简单给层次数做个减法就可以得到最短路径，即<code>d(1,2)</code>=<code>2</code></p><h4 id="总结">总结</h4><p>DFS和BFS是几乎所有图论算法的基础，因为搜索算法讨论的是图的连通性问题，连通性是图的本质属性（个体产生相互作用，才能形成关系图），其本质区别其实是<strong>栈</strong>和<strong>队列</strong>在数据结构特性上的区别：</p><ol><li><strong>栈</strong>是一种<strong>记录型结构</strong>，适合需要回溯的递归算法，所以DFS更具<strong>探索性</strong>，使用DFS遍历图，可以快速体系其整体性质</li><li><strong>队列</strong>是一种<strong>缓冲型结构</strong>，可以很好地保存顶点之间的前后顺序，所以BFS更具<strong>层次性</strong>，其遍历图也是“一圈一圈”地“层层递进”</li></ol><p>图的搜索算法是典型的小巧却异常强大的强应用算法，需好好掌握</p><p>行文匆忙，如果看到错误或代码bug，还请issue或在评论区指出(*/ω＼*)</p><h4 id="参考">参考</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA" target="_blank" rel="noopener">wiki-图论</a><br><a href="https://algs4.cs.princeton.edu/home/" target="_blank" rel="noopener">Algorithms, 4th Edition</a><br><a href="https://item.jd.com/11658913.html" target="_blank" rel="noopener">离散数学</a><br><a href="https://item.jd.com/12793968.html" target="_blank" rel="noopener">数据结构</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;图的深度优先搜索和广度优先搜索&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;搜索问题是图的众多算法中最核心最重要的，几乎所有图论算法都依赖图的搜索&lt;br&gt;
图的搜索算法是判定连通性的重要工具&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图论专栏" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE%E8%AE%BA%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>图的存储结构及封装</title>
    <link href="http://yoursite.com/2020/08/19/algorithm/data-structure/graph-theory/graph-theory-storage-structure/"/>
    <id>http://yoursite.com/2020/08/19/algorithm/data-structure/graph-theory/graph-theory-storage-structure/</id>
    <published>2020-08-19T14:10:05.000Z</published>
    <updated>2021-07-22T01:19:58.364Z</updated>
    
    <content type="html"><![CDATA[<h1>图的常见存储结构和封装</h1><blockquote><p>图的存储是这类数据结构的算法基础，又称物理结构，针对不同类型的图有不同的存储方案<br>在面向对象语言中，图可以通过封装来隔离各种存储结构以适应不同的场景，良好的存储结构封装是图算法的基础</p></blockquote><a id="more"></a><h4 id="阅读之前">阅读之前</h4><p>本文是系列文章的其中一篇，关于前后文请参见<a href="https://bladexue.github.io/2020/08/25/algorithm/data-structure/graph-theory-guide/" target="_blank" rel="noopener">图论专栏-导读</a></p><h4 id="概念">概念</h4><blockquote><p>所谓存储，就是设计一个结构，完整表示一个数据集</p></blockquote><p>作为一种数据结构，如果想把图和其它的抽象数据结构（也就是ADT）来使用，就必须将其表示成某种有效的形式，也就是图的存储结构。按照离散数学中对图的定义形式<code>G=(V,E)</code>，想要设计一个存储结构来表示一个图的完整数据，就必须完整且准确地反应<strong>顶点集</strong>和<strong>边集</strong>的信息。由于图的结构多样，针对不同的使用场景，会出现不同类型的图（如构造高铁线路多用稀疏图，而网站拓扑多是稠密图），可以采用不用的存储方案，而且在实际使用中，不同的存储结构对程序的效率有较大影响，所以必须根据真实问题，调整所选用的存储结构</p><p>一般来说，无论是有向图还是无向图，其主要的存储方式只有两种：</p><ol><li>邻接矩阵</li><li>邻接表</li></ol><blockquote><p>邻接矩阵属于图的顺序存储结构，邻接表属于链式存储结构</p></blockquote><p>在此基础上，针对无向图和有向图的区别，对普通邻接表进行优化，可以得到两种新的数据结构，也就是<strong>十字链表</strong>和<strong>邻接多重表</strong>，这4种结构成为了图的基本存储结构</p><h4 id="图的存储结构">图的存储结构</h4><blockquote><p>如果不带特殊说明，我们讨论图论问题时，说的都是简单图，也就是不带自旋和平行边的图<br>本文部分地方混淆了边和弧的释义，一般来说，有向边称弧，无向边称边</p></blockquote><h6 id="1-邻接矩阵">1. 邻接矩阵</h6><p>上文提过了，图<code>G=(V,E)</code>由一个<strong>顶点集</strong>和<strong>边集</strong>同时构成（不熟悉的旁友戳这里<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE_(%E6%95%B0%E5%AD%A6)" target="_blank" rel="noopener">图的数学定义</a>），所谓的邻接矩阵存储法，就是用一个<strong>一维数组</strong>存储图中的<strong>顶点</strong>信息，用一个<strong>二维数组</strong>存储图中的<strong>边</strong>信息（也就是各个顶点直接的邻接关系），存储顶点之间邻接关系的二维数组称为<strong>邻接矩阵</strong>，邻接矩阵同时也是数学上表示图论的最初方法（详见离散数学和矩阵论）</p><p>矩阵的构造有3点规则：</p><ol><li>如果图有n个顶点，就构造一个n*n的二维数组map</li><li>如果第i个结点和第j个结点直接有边（也就是i-&gt;j或i&lt;-&gt;j），那么map[i][j]=1</li><li>如果第i个结点和第j个结点之间没有边，则map[i][j]=0</li></ol><p>有向图的示例矩阵如下所示：</p><img src="/images/algorithm/map/storage/storage_matrix.png" title="storage_matrix" alt="storage_matrix" style="max-width:80%;margin:auto;" /><p>无向图的示例矩阵如下所示：</p><img src="/images/algorithm/map/storage/storage_matrix2.png" title="storage_matrix2" alt="storage_matrix2" style="max-width:80%;margin:auto;" /><blockquote><p>在这里你可以观测到无向图的邻接矩阵的对称性（也就是矩阵整体沿着[0][0]-&gt;[4][4]的斜线对称），0结点和1结点之间右边，所以[0][1]和[1][0]都是1，这也说明了，在结构上，无向图其实是有向图的一个特例（每条边同时拥有两个方向），在这个问题上衍生了一个矩阵压缩问题，在代码实现一节会详细提到</p></blockquote><p>其实到这里有小伙伴要问了啊，矩阵数值的0和1是固定的吗？当然不是，你想取什么就取什么，只要能区分无边和有边就行了，同时在带权图中，这个0/1可以衍生为权重值，表示从结点m到结点n所需要的代价，下图是一个有向带权图的简单示例（有点丑别介意）：</p><img src="/images/algorithm/map/storage/storage_matrix3.png" title="storage_matrix3" alt="storage_matrix3" style="max-width:80%;margin:auto;" /><blockquote><p>在之前的图中，0表示没边，但是这里0是权重值的一种，所以“无边”改成了字符&quot;x&quot;，这个取值其实是比较随意的，看个人习惯</p></blockquote><p>在这里需要最后提一个点，那就是<strong>邻接</strong>这个概念，如果你仔细观察上面的各个图的邻接矩阵，会发现，矩阵中的第i行数据，都是从i结点<strong>指出</strong>的边，第j列数据，都是<strong>指向</strong>j结点的边，这些边在图形中都是兄弟关系，所以称<strong>联结</strong>，联结边在图的遍历和搜索中是一个非常重要的概念。此外我在这边罗列了一些邻接矩阵表示法的一些性质和要点：</p><ul><li>无向图的邻接矩阵一定是一个对称矩阵（且唯一），所以在存储时可以采取“上三角阵压缩法”</li><li>对于无向图，邻接矩阵的第i行/列的非零元素即第i个结点的度</li><li>对于无向图，邻接矩阵的第i行/列的非零元素即第i个结点的出/入度</li><li>简单应用时，通常直接使用二维数据来实现矩阵</li><li>稠密图适合采用邻接矩阵法</li></ul><h6 id="2-邻接表">2. 邻接表</h6><p>邻接矩阵在一开始就固定了图的大小，在存储稠密图时很给力，但是如果我们存储的是一个稀疏图，那么邻接矩阵就会浪费大量的存储空间，于是出现了另一种存储方案，也就是邻接表法，邻接表同时使用了顺序存储和链式存储，极大地减少了空间浪费</p><img src="/images/algorithm/map/storage/storage_adjacency_list_node.png" title="storage_adjacency_list_node" alt="storage_adjacency_list_node" style="max-width:90%;margin:auto;" /><p>和邻接矩阵一样，邻接表也要完整表示图的<strong>顶点集</strong>和<strong>边集</strong>，在邻接表中，由一个数组来存储所有的顶点结点，这个数组称为顶点表（其中每个元素都代表了一个顶点），每个结点会带一个“小尾巴”，形式上一般是一个单链表，单链表中的元素为该顶点所持有的边，这条单链表称为边表（其中每个元素都代表了一条边），下图是一个无向图的邻接表示例：</p><img src="/images/algorithm/map/storage/storage_adjacency_list.png" title="storage_adjacency_list" alt="storage_adjacency_list" style="max-width:80%;margin:auto;" /><p>可以看到邻接表极大减少了空间浪费，再看一个有向图的例子：</p><img src="/images/algorithm/map/storage/storage_adjacency_list2.png" title="storage_adjacency_list2" alt="storage_adjacency_list2" style="max-width:80%;margin:auto;" /><blockquote><p>注意到这个5结点有一个自环（或者说自旋）<br>我们这边观察到每个结点的单链表似乎是有序的，但其实顺序在图结构里没有意义，这个“边集”的单链表你想怎么排序都行，实现时通常采用迭代器</p></blockquote><p>和邻接矩阵一样，我在这里罗列了一些邻接表的性质和要点：</p><ul><li>如果是无向图，每条边会在连接表中出现两次，所以存储空间为O(|V|+2*|E|)，而如果时有向图，每条有向边只出现一次，存储为O(|V|+|E|)，在实际编程中，我们会将无向图看作有向图的特殊形式，大多数时候在实现上不做区分</li><li>对于稀疏图，采用邻接表存储可以极大程度节约空间</li><li>对于“邻接”这个概念，在邻接表中，如果想访问一个顶点的所有边是非常容易的，只要遍历它所携带的那条链表（边表）就行了，链表上的每个元素的next的实意是“当前边在附着点上的兄弟边”。但是如果想确定两个顶点是否存在边，就需要扫描整个表了，而在邻接矩阵中，只要访问[i][j]是否=1即可（这就是邻接矩阵作为完全顺序存储的优势，虽然空间上不讨好，但是读写很快）</li><li>同样的，在有向图中，确定一个顶点的出度只要遍历其边表（也就是所持有的单链表）即可，但是如果要确定其入度，则要遍历全表</li><li>上文提过，图的邻接表表示并不唯一，因为每个顶点所携带的表示边集的单链表是无序的，其次序取决于建立邻接表时数据输入序列和所用的算法</li></ul><blockquote><p>对于实际应用来说，邻接矩阵和邻接表是最常见的两种图的存储方式，但是针对邻接表的一些结构问题，衍生出两种优化型的邻接表结构，通常不做要求，理解即可（因为形式上有点复杂，不是很好理解，实际的使用频率也不是特别高），下文会简单讲述一下<strong>十字链表</strong>和<strong>邻接多重表</strong></p></blockquote><h6 id="3-十字链表">3. 十字链表</h6><p>十字链表是邻接表针对<strong>有向图</strong>的一种优化链式存储结构，为的是解决邻接表的<code>出入度计算问题</code>。十字链表是一种模拟邻接矩阵的类邻接表结构，在<strong>实现上可以看作是邻接表和逆邻接表的合体</strong>，兼顾了邻接表对稀疏图的有效空间利用和邻接矩阵行列快速求解出入度的优势</p><p>在这里我给出了一个有向图的例子来解释一下十字链表的由来，图中分别是有向图的图例，邻接矩阵表示，邻接表表示和逆邻接表：</p><blockquote><p>通常有向图的邻接表顶点A持有的表示弧集的单链表代表的是出弧（由A指向某个顶点B的弧），逆邻接表所表示的则是入弧（由某个顶点B指向A的弧），前者容易计算顶点出度，后者容易计算顶点入度</p></blockquote><img src="/images/algorithm/map/storage/orthogonal_linked_list.png" title="orthogonal_linked_list" alt="orthogonal_linked_list" style="max-width:99%;margin:auto;" /><p>前文在邻接表的一节中提过，对于有向图的邻接表来说，计算某个顶点的出度是很容易的，只要遍历其持有的单链表（弧集）即可，但是计算其入度则要遍历整个表，这就非常蛋疼了（对于逆邻接表则是反的，很容易计算顶点的入度，但是计算出度要遍历全表），而在另一边，使用邻接矩阵的有向图，顶点i的出度为<code>[i][*]</code>的有效和，入读为<code>[*][i]</code>的有效和，以上图的<code>顶点1</code>为例：</p><ul><li>出度=行和=[1][0]+[1][1]+[1][2]+[1][3]=0</li><li>入度=列和=[0][1]+[1][1]+[2][1]+[3][1]=2</li></ul><blockquote><p>为了模拟邻接矩阵这种行和列的关系，我们将邻接表和逆邻接表结合，就可以得到<code>十字链表</code>了</p></blockquote><p>对于十字链表来说，依旧是采用顶点数据和弧集链表的方式，顶点集和弧集的结点结构如下：</p><img src="/images/algorithm/map/storage/orthogonal_linked_list_node.png" title="orthogonal_linked_list_node" alt="orthogonal_linked_list_node" style="max-width:70%;margin:auto;" /><p>十字链表的弧结点是有向图的邻接表和逆邻接表中弧结点的组合，代表一条弧（也就是有向边），其各部分释义如下：</p><ul><li>tailvex/headvex：这条弧为<code>tailvex-&gt;headvex</code>（也就是由tailvex指向headvex，vex是顶点的意思，有向图中每条弧的方向都是弧尾tailvex指向弧头headvex）</li><li>hlink：指向弧头相同的下一条弧（等价于逆邻接表中的nextarc）</li><li>tlink：指向弧尾相同的下一条弧（等价于邻接表中的nextarc）</li></ul><p>十字链表的顶点结点是有向图的邻接表和逆邻接表中顶点结点的组合，其同时持有两个单链表起点，其各部分释义如下：</p><ul><li>data：表示其实体数据，一般是结点id</li><li>firstin/firstout：以该顶点为弧头/弧尾的第一条弧</li></ul><p>下图是上文图例的十字链表表示：</p><img src="/images/algorithm/map/storage/orthogonal_linked_list2.png" title="orthogonal_linked_list2" alt="orthogonal_linked_list2" style="max-width:65%;margin:auto;" /><blockquote><p>值得注意的是，顶点集依旧是顺序存储的</p></blockquote><p>注意观察下图的染色部分，通过剥离顶点结点的in链和out链，我们可以分别把十字链表退化成邻接表和逆邻接表：</p><ul><li>剥离out方向：十字链表退化成邻接表</li></ul><img src="/images/algorithm/map/storage/orthogonal_linked_list3.png" title="orthogonal_linked_list3" alt="orthogonal_linked_list3" style="max-width:95%;margin:auto;" /><ul><li>剥离in方向：十字链表退化成逆邻接表</li></ul><img src="/images/algorithm/map/storage/orthogonal_linked_list4.png" title="orthogonal_linked_list4" alt="orthogonal_linked_list4" style="max-width:95%;margin:auto;" /><p>这里罗列十字链表的几个性质和要点：</p><ul><li>十字链表是一种针对<strong>有向图</strong>的链式存储结构</li><li>在十字链表中，对于一个顶点vi，既可以容易找到vi为尾的弧，又容易找到vi为头的弧，因而容易求得顶点的出度和入度，而无需像在邻接表中那样遍历全表</li><li>图的十字链表表示不是唯一的，但是一个十字链表可以确定一个图</li><li>一个有向图的十字链表可以退化成邻接表和逆邻接表</li><li>在Linux内核中有广泛应用</li></ul><h6 id="4-邻接多重表">4. 邻接多重表</h6><p>十字链表是针对<strong>有向图</strong>的一种优化结构，那么邻接多重表就是针对<strong>无向图</strong>的一种优化链式存储结构，其核心思想是<code>多链表结点重叠结构</code></p><p>我们前文提到过，无向图其实可以看作有向图的一种特殊情况，无向图的每条边，其实都可以看作两条平行的弧，因此在无向图的邻接表中，每条边会出现两次，这就当我们需要新增或者删除某条边时，需要遍历全表，这就显得非常不环保，所以出现了<strong>邻接多重表</strong>，将无向图的邻接表中中同一条边的两个副本重叠，从而减少遍历负担</p><p>我们来看一个无向图的图例及其邻接表表示：</p><img src="/images/algorithm/map/storage/adjacency_multilist.png" title="adjacency_multilist" alt="adjacency_multilist" style="max-width:75%;margin:auto;" /><p>可以清楚地看到，无向图的边数为6，而其邻接表的边结点数为12，每条边都出现了两次，它们表示的其实是同一条边，这就其实造成了一种冗余，也是我们删除困难的诱因，所以我们重新设计一下边结点的结构，参考双向链表的设计，使其能同时链接在两个链表（每天链表都表示某个顶点vi的所有边，这其实就是将我们的边的两端设置成其所连接的两个顶点）中，完整结构如下：</p><img src="/images/algorithm/map/storage/adjacency_multilist2.png" title="adjacency_multilist2" alt="adjacency_multilist2" style="max-width:95%;margin:auto;" /><p>顶点结点和邻接表中没有区别，主要是边结点，它其实就是把邻接表中的一条边的两个结点缝合在一个结点里，各个域的释义如下：</p><ul><li>ivex/jvex：为该边依附的两个顶点id</li><li>ilink：指向下一条依附于顶点ivex的边（也就是邻接的概念，指向兄弟边，目的是方便遍历）</li><li>jlink：指向下一条依附于顶点jvex的边（也就是邻接的概念，指向兄弟边，目的是方便遍历）</li></ul><p>通过这个结构，使得<strong>每个边结点同时链接在两个链表中</strong>，下面是上文图例的临接多重表的表示：</p><img src="/images/algorithm/map/storage/adjacency_multilist3.png" title="adjacency_multilist3" alt="adjacency_multilist3" style="max-width:50%;margin:auto;" /><p>可以观察到，边结点的数目由之前的12个降到了6个，在这里每条边只出现了一次，也就是说每条边只有一个边结点，于是在删除和新增边的时候，就没有了之前奇奇怪怪的扫描问题</p><blockquote><p>同样地，邻接多重表可以像十字链表拆分邻接表那样，拆分成其最初的邻接表，这里留给读者大人们自己实现一下，就当是熟悉邻接多重表的小练习了（其实是作者偷懒XD）</p></blockquote><p>这里罗列一下邻接多重表的几个性质和要点：</p><ul><li>邻接多重表就是针对<strong>无向图</strong>的一种优化链式存储结构</li><li>邻接多重表是为了解决无向边的邻接表在删除边时需要扫描全表的问题</li><li>邻接多重表中每条边只有一个结点</li></ul><blockquote><p>至此</p></blockquote><h4 id="子图的表示问题">子图的表示问题</h4><p>子图的问题其实在图的存储中不是什么难题，甚至完全不需要关心，就比如下图是一个非连通图（树可以看作一种特殊的图，森林其实就是一幅图），依旧采用邻接表法，和一般表示没有区别：</p><img src="/images/algorithm/map/storage/storage_adjacency_list_subgraph.png" title="storage_adjacency_list_subgraph" alt="storage_adjacency_list_subgraph" style="max-width:100%;margin:auto;" /><blockquote><p>在处理全图遍历的时候可能会有一点点不同，但是很容易调整，这不是本篇的重点</p></blockquote><h4 id="图的封装和代码实现">图的封装和代码实现</h4><p>由于图处理的相关算法种类众多，而且图的存储结构对算法的实现和效率有很大的影响，所以图类数据结构和算法设计的首要目标就是把<strong>把图的表示和实现分离开来</strong>，落实到代码上就是分层次设计<code>图的表示</code>，<code>图的存储</code>和<code>处理算法实现</code>。首先要说明一下，图论真的是相当灵活和多变的结构，所以JDK的集合框架没有提供通用图接口（因为实在是没有“万能”的图结构代码模板），而在实际的编程中，也不会煞费苦心设计一个类似<code>java.util.List</code>一样的接口类，经常就直接写了个二维数组就开始实现算法了，所以没必要煞费苦心去搞什么抽象图结构代码。想把代码写复杂很容易，但是写简单却很难，图论算法的一个Magic的地方就是，一些很少的性质，就可以实现很复杂的图的构造和优化搜索，本文在实现上，体现图论的结构核心为主，涉及的一部分oop只是我组织代码用的，重点应该是还是数据结构本身</p><blockquote><p>本节的代码请参见<a href="https://github.com/bladeXue/graph-algorithm-kit" target="_blank" rel="noopener">graph-algorithm-kit</a>，这也是本文所在专栏的基础代码，演示为主，为了表达简洁，砍掉了很多内容，实际应用请根据需求调整</p></blockquote><p>图结构设计的重点就是<strong>把图的表示和实现分离开来</strong>，在正式编写代码之前，我们可以先确定一下一个有效的图结构，必须完成哪些功能：</p><ul><li>有效表示顶点集和边集</li><li>图是否存在边&lt;v,w&gt;</li><li>列出顶点v的邻接边</li><li>输出某顶点的第一个邻接点</li><li>输出某顶点的下一个邻接点</li><li>插入/删除一个顶点</li><li>插入删除一条边</li><li>获得/重置某条边的权重值</li></ul><p>尽管这么说，其实很多功能对于一个最小功能的图结构是不需要的，比如删除一个顶点，其实很多时候并不是一个必要功能，于是我们定义的最小图结构代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个抽象的无向图</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回G=(V,E)的顶点数和边数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">V</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">E</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增一条边</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>;</span><br><span class="line">    <span class="comment">// 获取某个顶点的所有邻接点</span></span><br><span class="line">    <span class="function">Iterable&lt;Integer&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个抽象的有向图图</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Digraph</span> <span class="keyword">extends</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出一张逆向图</span></span><br><span class="line">    <span class="function">Digraph <span class="title">reverse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没错，如你所见，我们定义的最小图结构其实就两个计数方法和两个核心方法，其中<code>adj()</code>方式是最核心的方法，这涉及了邻接结构的核心和图类算法的<strong>短视性</strong></p><blockquote><p>短视性，又称<strong>局部可见性</strong>，是链式结构的常见属性，指程序在扫描链式结构时，通常同时只能查看当前结点和其直接相连的结点，类似“盲人摸象”，只能见局部，不可见整体，但是正是由于这种特性，可以和递归算法很好搭配，也造成了图论算法的简洁性，尤其是操作成千上万顶点的图时尤其明显</p></blockquote><p>虽然我一直在讲无向图是一种特殊的有向图balabala，但是在实现的时候，我还是把它们分开了，尽管无向图的代码随便改两行就可以拿到有向图那边用了，但是为了条理更清晰，我还是分开写了</p><p>在上文放出的repo里，一共有两个核心接口<code>Graph</code>和<code>Digraph</code>，实现了8个存储类<code>ListDigraph</code>，<code>ListGraph</code>，<code>MatrixDigraph</code>，<code>MatrixGraph</code>，<code>MultiListGraph</code>，<code>OrthogonalDigraph</code>，<code>SetDigraph</code>，<code>SetGraph</code>和一个工具类<code>Graphs</code>，备注如下</p><table><thead><tr><th>名称</th><th>继承关系</th><th>实现结构</th><th>描述</th></tr></thead><tbody><tr><td>interface Graph</td><td>-</td><td>接口</td><td>无向图接口</td></tr><tr><td>interface Digraph</td><td>extends Graph</td><td>接口</td><td>有向图接口，继承自无向图</td></tr><tr><td>abstract class Graphs</td><td>-</td><td>抽象类</td><td>工具类，封装各种对图操作函数</td></tr><tr><td>class ListDigraph</td><td>implements Digraph</td><td>类</td><td>有向图的邻接表存储结构</td></tr><tr><td>class ListGraph</td><td>implements Graph</td><td>类</td><td>无向图的邻接表存储结构</td></tr><tr><td>class MatrixDigraph</td><td>implements Digraph</td><td>类</td><td>有向图的邻接矩阵存储结构</td></tr><tr><td>class MatrixGraph</td><td>implements Graph</td><td>类</td><td>无向图的邻接矩阵存储结构</td></tr><tr><td>class MultiListGraph</td><td>implements Graph</td><td>类</td><td>无向图的邻接多重表存储结构</td></tr><tr><td>class OrthogonalDigraph</td><td>implements Digraph</td><td>类</td><td>有向图的十字链表存储结构</td></tr><tr><td>class SetDigraph</td><td>implements Digraph</td><td>类</td><td>有向图的邻接集存储结构</td></tr><tr><td>class SetGraph</td><td>implements Graph</td><td>类</td><td>无向图的邻接集存储结构</td></tr></tbody></table><blockquote><p>这些方便演示，都是简单图（无自环无平行边）且不带权<br>由于条目比较多，这里只演示<code>ListGraph</code>，其余的请自行阅读代码</p></blockquote><p>ListGraph是无向图的邻接表存储结构（个人比较常用的，因为实现比较清晰，比邻接矩阵更环保一点），其完整的类签名如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListGraph</span> <span class="keyword">implements</span> <span class="title">Graph</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>其所实现的Graph接口，完整如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个抽象的无向图G=(V,E)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">V</span><span class="params">()</span></span>;    <span class="comment">// 顶点数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">E</span><span class="params">()</span></span>;    <span class="comment">// 边数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>;     <span class="comment">// 新增一条边</span></span><br><span class="line">    <span class="function">Iterable&lt;Integer&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span></span>;   <span class="comment">// 获取某个顶点的所有邻接点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类，封装了几个工具函数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判定顶点索引是否越界（本例中，顶点id就是）</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validateVertex</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> V)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= V) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"vertex "</span> + v + <span class="string">" is not between 0 and "</span> + (V - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将图以邻接表字符串的形式打印</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">printAdjacencyList</span><span class="params">(Graph g)</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"the graph of "</span> + g.getClass().getSimpleName() + <span class="string">" : "</span>);</span><br><span class="line">            sb.append(g.V()).append(<span class="string">" vertices, "</span>).append(g.E()).append(<span class="string">" edges \n"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g.V(); i++) &#123;</span><br><span class="line">                sb.append(<span class="string">"["</span>).append(i).append(<span class="string">"]"</span>);</span><br><span class="line">                <span class="keyword">for</span> (Integer integer : g.adj(i)) &#123;</span><br><span class="line">                    sb.append(<span class="string">"-&gt;"</span>).append(integer);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将图以邻接矩阵字符串的形式打印</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">printAdjacencyMatrix</span><span class="params">(Graph g)</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"the graph of "</span> + g.getClass().getSimpleName() + <span class="string">" : "</span>);</span><br><span class="line">            sb.append(g.V()).append(<span class="string">" vertices, "</span>).append(g.E()).append(<span class="string">" edges \n"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> V = g.V();</span><br><span class="line">            <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[V][V];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; V; v++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Integer w : g.adj(v)) &#123;</span><br><span class="line">                    matrix[v][w] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(<span class="string">"   "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">                sb.append(i).append(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// row i</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">                sb.append(i).append(<span class="string">": "</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; V; j++) &#123;</span><br><span class="line">                    sb.append(matrix[i][j]).append(<span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判定插入边v-&gt;w后是否依旧是简单图，true-&gt;is simple</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkSimpleGraph</span><span class="params">(Graph graph, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer i : graph.adj(v)) &#123;</span><br><span class="line">                <span class="comment">// 自环或平行边</span></span><br><span class="line">                <span class="keyword">if</span> (v == w || i.equals(w))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//throw new RuntimeException("edge has exited: " + v + " -&gt; " + w);</span></span><br><span class="line">            <span class="comment">//可以选择抛异常或者缄默，这里选择缄默</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这是一个选择缄默的简单图判定，大致和上面的一致</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkSimpleGraph</span><span class="params">(Graph graph, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">boolean</span> throwE)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer i : graph.adj(v)) &#123;</span><br><span class="line">                <span class="comment">// 自环或平行边</span></span><br><span class="line">                <span class="keyword">if</span> (v == w || i.equals(w))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (throwE) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"edge has exited: "</span> + v + <span class="string">" -&gt; "</span> + w);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 独立判定平行边</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasParallel</span><span class="params">(Graph graph, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer i : graph.adj(v)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i.equals(w))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 独立判定自环</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLoop</span><span class="params">(Graph graph, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> v == w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是ListGraph的完整源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListGraph</span> <span class="keyword">implements</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> V;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> E;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;List&lt;Integer&gt;&gt; adj;  <span class="comment">// 这里没有采用我自己写的链表而是JDK的集合类，减轻阅读负担   </span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListGraph</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Number of vertices must be nonnegative"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 初始化计数器</span></span><br><span class="line">            <span class="keyword">this</span>.V = v;</span><br><span class="line">            <span class="keyword">this</span>.E = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化邻接表，顺序存储+链式存储</span></span><br><span class="line">            <span class="keyword">this</span>.adj = <span class="keyword">new</span> ArrayList&lt;&gt;(v);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v; i++) &#123;</span><br><span class="line">                <span class="keyword">this</span>.adj.add(i, <span class="keyword">new</span> LinkedList&lt;&gt;()); <span class="comment">// 其实你用Vector也是没有任何问题的</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">E</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.E;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增一条边</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 越界检查</span></span><br><span class="line">        GraphUtils.validateVertex(v, <span class="keyword">this</span>.V);</span><br><span class="line">        GraphUtils.validateVertex(w, <span class="keyword">this</span>.V);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简单图拒绝自环和平行边</span></span><br><span class="line">        <span class="keyword">if</span> (GraphUtils.checkSimpleGraph(<span class="keyword">this</span>, v, w)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.adj.get(v).add(w);</span><br><span class="line">            <span class="keyword">this</span>.adj.get(w).add(v);</span><br><span class="line">            <span class="keyword">this</span>.E++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.adj.get(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> GraphUtils.printAdjacencyList(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里简单解释一下这个类，整体上是“数组+链表”的标准邻接表结构，一开始是用我自己写的背包结构（其实就是单链表）实现的，但是我知道读博客的都不太喜欢看本篇幅之外的过多内容，所以干脆用了集合框架，但其实实际应用时我也是支持用集合框架的，因为你自己写的链表，可能会有bug，性能还没人家集合框架好。。。。</p><p>整个代码中最核心的部分就是<code>adj()</code>方法了，这个方法返回一个可迭代对象，可以说是所有图论结构的核心了，我们这里用的集合框架，所以一行就搞定了，但其实如果自己写可以更加细腻（参见十字链表的代码）</p><h6 id="测试用例1：">测试用例1：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGraph</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Graph g = <span class="keyword">new</span> ListGraph(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        g.addEdge(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        g.addEdge(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        g.addEdge(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        g.addEdge(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        g.addEdge(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        g.addEdge(<span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">        g.addEdge(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">        g.addEdge(<span class="number">3</span>, <span class="number">2</span>);    <span class="comment">// 陷阱1，平行边</span></span><br><span class="line">        g.addEdge(<span class="number">3</span>, <span class="number">3</span>);    <span class="comment">// 陷阱2，自环</span></span><br><span class="line"></span><br><span class="line">        System.out.println(g.toString());</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        <span class="comment">// the graph of ListGraph : 5 vertices, 7 edges </span></span><br><span class="line">        <span class="comment">// [0]-&gt;1-&gt;4</span></span><br><span class="line">        <span class="comment">// [1]-&gt;0-&gt;2-&gt;4-&gt;3</span></span><br><span class="line">        <span class="comment">// [2]-&gt;1-&gt;3</span></span><br><span class="line">        <span class="comment">// [3]-&gt;1-&gt;4-&gt;2</span></span><br><span class="line">        <span class="comment">// [4]-&gt;0-&gt;1-&gt;3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是上文的演例之一：</p><img src="/images/algorithm/map/storage/storage_adjacency_list.png" title="storage_adjacency_list" alt="storage_adjacency_list" style="max-width:80%;margin:auto;" /><h6 id="测试用例2：">测试用例2：</h6><p>这里贴上一部分Graphs工具类代码，可以清晰看到，简单的邻接结构是多么给力：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 操作图的工具类，类似集合框架的Arrays类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Graphs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算某个顶点的度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">degree</span><span class="params">(Graph graph, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> degree = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : graph.adj(v)) &#123;</span><br><span class="line">            degree++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> degree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算最大的度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxDegree</span><span class="params">(Graph graph)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.V(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> de = degree(graph, i);</span><br><span class="line">            <span class="keyword">if</span> (de &gt; max) &#123;</span><br><span class="line">                max = de;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此就是无向图的邻接表演示，更多的代码请阅读GitHub（写得比较匆忙，看到问题记得issue）</p><h4 id="一点碎碎念">一点碎碎念</h4><h6 id="关于存储结构的抉择">关于存储结构的抉择</h6><p>图是数据结构中最复杂最灵活也是最重要的一类结构，使用场景成千上万，存储结构极其多变（如果你看了十字链表的实现，想必你深有体会），不同情况下选择不同的数据结构会对程序效率造成极大影响</p><p>在为图选择存储结构时，通常有以下考虑：</p><ul><li>稀疏或者稠密</li><li>读频繁还是写频繁</li><li>业务模型适合图吗</li><li>这个结构是否会被很多程序引用</li></ul><p>举个例子，如果程序仅仅是实现一个简单的状态转移，那么邻接矩阵是一个很不错的选择，你甚至不需要封装图结构，直接一个二维数组+几个操作函数就可以用了，但是V个顶点的图采用邻接矩阵会有O(V**2)的空间损耗，如果是一个地图应用， 那么会有几百万个顶点，这对于空间消耗来说是难以接受的，所以多数情况下使用的是邻接表，在更要求性能的情况下也会升级成十字链表和邻接多重表，但是这两个都是比较复杂的高级数据结构了，写起来比较麻烦，所以比较中庸的做法是邻接表或者邻接集</p><p>当然了，所以的片面之词，都不及在你实际的业务中，自己尝试，采用最适合业务的结构</p><h6 id="如何使用图结构">如何使用图结构</h6><p>其实在实际业务中，很难看见正儿八经像集合框架一样封装的图结构，基本都是想到就用，直接二维数据+操作函数就上，或者数组+线表直接实现了邻接表就上的例子多得是，主要还是图论太过灵活了，很少可以看到一个图结构在多个场景中重复使用的，基本上是A场景来个AOE网，B厂家来个自动机，很少会出现抽象封装的Graph类（本文是为了方便组织各个存储实现代码，业务上是不会有的）</p><p>但是设计图结构的宗旨是不变的：</p><ul><li>图的表示和存储分离</li><li>设计尽可能少和简单的API</li></ul><p>通常来说，你会遇到图论的地方只有两个：</p><ol><li>笔试题</li><li>业务核心</li></ol><p>在第一种情况中，通常是类似Leetcode或者ACM一类的的在线编程平台，如下所示：</p><img src="/images/algorithm/map/storage/leetcode.png" title="leetcode" alt="leetcode" style="max-width:90%;margin:auto;" /><p>通常没有什么机会让你把一套代码拆分成多个文件，而且编程时间有限，我们通常会把图论的代码收缩成一套特别简单的demo，然后背一背，遇到这种题目，也别考虑什么封装性了，直接数组+链表写一个邻接表就行了，别整太多花里胡哨的，而第二种情况，当你遇到很复杂的业务逻辑，需要设计一个图结构时，也是简单至上，因为图的API已经很复杂了，再往你的业务里一杵，复杂度能累死你，而且图结构的适应性比较差，一般就是一个问题场景设计一个专用图，换个场景再设计一个，很少会有“万金油”的一类抽象图</p><h4 id="总结">总结</h4><p>图的存储是图论的基础，多看源码，多拍砖，看到有错记得issue</p><h4 id="参考">参考</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA" target="_blank" rel="noopener">wiki-图论</a><br><a href="https://algs4.cs.princeton.edu/home/" target="_blank" rel="noopener">Algorithms, 4th Edition</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;图的常见存储结构和封装&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;图的存储是这类数据结构的算法基础，又称物理结构，针对不同类型的图有不同的存储方案&lt;br&gt;
在面向对象语言中，图可以通过封装来隔离各种存储结构以适应不同的场景，良好的存储结构封装是图算法的基础&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图论专栏" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE%E8%AE%BA%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>初识图论-概念和模型</title>
    <link href="http://yoursite.com/2020/08/16/algorithm/data-structure/graph-theory/graph-theory-first-learn-and-concepts/"/>
    <id>http://yoursite.com/2020/08/16/algorithm/data-structure/graph-theory/graph-theory-first-learn-and-concepts/</id>
    <published>2020-08-16T14:10:05.000Z</published>
    <updated>2021-07-22T01:19:58.362Z</updated>
    
    <content type="html"><![CDATA[<h1>图结构的基本概念，定理和问题</h1><blockquote><p>图结构是计算机中最重要最复杂的一类数据结构<br>本篇重点讲解图论的基本概念，建立起对图结构的直观看法</p></blockquote><a id="more"></a><h4 id="阅读之前">阅读之前</h4><p>本文是系列文章的其中一篇，关于前后文请参见<a href="https://bladexue.github.io/2020/08/25/algorithm/data-structure/graph-theory-guide/" target="_blank" rel="noopener">图论专栏-导读</a></p><h4 id="什么是图">什么是图</h4><p>在很多计算机应用里，由相连的结点所表示的模型起到了关键的作用，这一类模型通常由多对多关系组成，其背后的抽象结构就是图。图结构是一种非常重要的数据模型，往往直接和现实世界的问题模型相关联，图论算法是数据结构算法中的精粹，是解决许多重要的实际问题的基础</p><p>图论最初被人关注的问题很简单，当我们将个体抽象成一个个相连接的结点后，自然而然产出了一系列问题：通过这些连接能否从一个结点到达另一个结点？有多少结点和指定结点相连？两个结点中最短的连接是哪一条？</p><p>有意思的是，这些看似非常简单的问题恰恰构成了图论算法的核心，当我们深入学习图论算法后，会发现这些算法其实都很简洁，且结构性很强，图论算法的代码通常很短但是很有意思</p><p>下表给出了图结构的一些典型应用：</p><table><thead><tr><th>应用</th><th>描述</th><th>结点</th><th>连接</th></tr></thead><tbody><tr><td>地图</td><td>公路网是典型的图，最出名的就是最短路径算法</td><td>交叉路口</td><td>公路</td></tr><tr><td>网络内容</td><td>各个网站之间的超链接指向形成了一张图</td><td>网页</td><td>超链接</td></tr><tr><td>电路</td><td>电路的元器件连通走向</td><td>元器件</td><td>导线</td></tr><tr><td>任务调度</td><td>内核的CPU任务往往有前驱性，可以形成前驱图</td><td>任务</td><td>限制条件</td></tr><tr><td>商业交易</td><td>在信息化交易体系中，图可以表示各个产品的资金流向，帮助投资人理清关系</td><td>客户</td><td>交易</td></tr><tr><td>配对</td><td>学生可以申请加入机构</td><td>学生</td><td>申请</td></tr><tr><td>计算机网络</td><td>类似公路问题，网络算法总是希望找到最快的路径来传递报文</td><td>网站</td><td>物理连接</td></tr><tr><td>软件</td><td>最著名的问题恐怕是循环依赖了，利用的就是图的环路问题</td><td>方法</td><td>调用关系</td></tr><tr><td>社交网络</td><td>朋友网络是一种图，大型公司通常是用这个图来进行好友推荐</td><td>人</td><td>友谊关系</td></tr></tbody></table><h4 id="认识图论：从一个想过河的人说起">认识图论：从一个想过河的人说起</h4><p>前文说过，很多现实问题，都可以抽象成有关的数学集合和二元关系问题，这里我举一个经典的“人狗羊菜问题”（又称过河问题）为例，就是说一个人带着一只狗，一只羊和一捆菜准备过河，但是河上只有一只小船，承重有限，人每次过河只能带一样东西，但是：</p><ul><li>不能把狗和羊同时单独留在一边（狗会吃掉羊）</li><li>不能把羊和菜同时单独留在一边（羊会吃掉菜）</li></ul><p>问：找到一个策略，将人狗羊菜都带到河的另一边且不损失任何物件？</p><p>在这个问题中，我们拥有4个实体对象，也就是人，狗，羊和菜，我们建立一个二元集合(X,Y)，也就是对于(人狗羊菜,0)表示人狗羊菜都在岸的一边，有人看着相安无事，这一个称为“合法局面”，而另一边是空的，如果是(人狗,羊菜)则表示一边是人狗，另一边是羊和菜，羊吃掉了菜，方案失败，这个称为“非法局面”，除此之外的合法局面还有(0,人狗羊菜)，(人羊,狗菜)，(菜,人狗羊)等等，<strong>如果两个合法局面之间可以直接转换，那我们就画一条边</strong>，表示它们有直接关系R，由于R是对称的（A-&gt;B等价于B-&gt;A），所以使用直线连接而不是箭头，于是获得下图：</p><img src="/images/algorithm/map/concepts/man_dog_sheep_grass.png" title="man_dog_sheep_grass" alt="man_dog_sheep_grass" style="max-width:70%;margin:auto;" /><blockquote><p>本题这个图又叫“局面转移图”，或者“状态转移图”</p></blockquote><p>观察这个图形，不难发现，图的左右两端是我们问题的起点和终点，只要沿着左端，按照沿路结点的顺序来运送物件，就可以成功运送物件到河岸且无损失（也就是从图的左端点，到图的右端点）。同时观测到这个方案其实有两个，选择哪个都可以解决这个“人狗羊菜”问题</p><p>至此我们利用图论解决了第一个问题，想必对图论也有了一个较为直观的感受，其实不难看出，应用图论模型来解决问题其实有一定的步骤：</p><ol><li>建立顶点集：根据问题，建立合适的顶点集，顶点往往代表一个状态或者实体</li><li>建立边集：在顶点集的基础上，根据条件限制，确认边集（顶点之间的关系，边是关系的具象化）</li><li>建立有效模型：在顶点集和边集的模型基础上，并尝试讨论该图是否一些具体性质，如连通性（A点和B点是否有可达通路），优化路径（A点到B点有多条路时是否有一条路比其它路短）</li><li>输出有效数据：根据图论拥有或者可能拥有的性质，建立算法步骤，获得解决问题需要的具体数据，如A点和B点若连通，输出其具体的沿途路径，若有可能多条路径，输出路径数目</li></ol><blockquote><p>值得注意的是，实际应用中，图论问题往往是某个复杂问题的子问题（如正则的FSM最后其实就是图的顶点可达性问题），步骤可能不完全一致，但是要点都是一致的</p></blockquote><blockquote><p>在上文的人羊狗菜问题中，我们也可以看到，一个图形，可能拥有众多特性，如短视性（每个顶点只能和直接相连的顶点移动），选择性（可用方案往往有多个）和对称性（A可到B，则B可到A），讨论这些性质的有无是一个图的重要内容，也是下节的重点</p></blockquote><h4 id="图的重要概念">图的重要概念</h4><p>图结构在应用时种类繁多，尤其灵活，仅凭上节的粗糙模型是无法完整描述并解决图论问题的，必须使用正确严谨的逻辑语言对其进行描述。图的概念众多，基本概念主要分为3类：</p><ol><li>点边模型</li><li>路径和连通性</li><li>子图</li></ol><blockquote><p>图论原本是数学分支，详细之处还请参考严谨离散数学教材，我这里仅作数据结构方面的解释</p></blockquote><h6 id="图的集合定义">图的集合定义</h6><p>设一个图为<code>G</code>，由顶点集<code>V</code>和边集<code>E</code>组成，记为<code>G=(V,E)</code>，其中<code>V(G)</code>表示图<code>G</code>中顶点的非空有限集，<code>E(G)</code>表示图<code>G</code>中顶点之间的关系（边）集合，每个关系（边）都是一个有效的顶点对。对于一个图<code>G</code>，若<code>V={v1,v2,v3 ...}</code>，其顶点数目为图<code>G</code>的阶，记作<code>|V|</code>，且有<code>E={(u,v)|u∈V,v∈V}</code>，记作<code>|E|</code>为该图的边数</p><blockquote><p>线性表和二叉树都可以为空，但是图<strong>不可以为空</strong>（此处指顶点集必须非空，因为顶点代表实体，但是边集可以非空，也可以空，此时图只有结点没有边）</p></blockquote><h6 id="图的有向性">图的有向性</h6><p>前文提到，边是图中顶点的一个二元关系，在形式上表示为一个二元关系<code>{v,w}</code>，其中v和w是否表达先后关系决定图是否有向</p><p>当图<code>G</code>为<strong>有向图</strong>时，边为有向边（或者<strong>弧</strong>），有向边是顶点的有序对，记为<code>&lt;v,w&gt;</code>，作图为箭头，且<code>&lt;v,w&gt;≠&lt;w,v&gt;</code>。对于<code>&lt;v,w&gt;</code>，其中v和w是顶点，其中v称为弧尾，w称弧头，<code>&lt;v,w&gt;</code>称从顶点v到顶点w的弧，其表示<code>v-&gt;w</code>的一条<strong>有向</strong>边，表达上称<strong>v邻接到w</strong>或者<strong>w邻接自v</strong></p><p>设有向图<code>G1=(V1,E2)</code>表示有<code>V1={1,2,3}</code>和<code>E1={&lt;1,2&gt;,&lt;2,1&gt;,&lt;2,3&gt;}</code>，则有作图：</p><img src="/images/algorithm/map/concepts/directed_graph.png" title="directed_graph" alt="directed_graph" style="max-width:70%;margin:auto;" /><p>当图<code>G</code>为<strong>无向图</strong>时，边为无向边（简称<strong>边</strong>），无向边是顶点的无序对，记为<code>(v,w)</code>，作图为直线，且<code>(v,w)=(w,v)</code>。对于<code>(v,w)</code>，其表示等价于<code>(w,v)</code>，其中v和w是顶点，其中v和w称互为邻接，边<code>(v,w)</code>依附于顶点v和w，其表示<code>v&lt;-&gt;w</code>的一条<strong>无向</strong>边</p><p>设无向图<code>G2=(V2,E2)</code>表示有<code>V2={1,2,3,4}</code>和<code>E2={(1,2),(1,3),(1,4),(2,3),(2,4),(3,4)}</code>，则有作图：</p><img src="/images/algorithm/map/concepts/undirected_graph.png" title="undirected_graph" alt="undirected_graph" style="max-width:70%;margin:auto;" /><p>图的<strong>有向性</strong>其实表示了顶点之间关系的一些限制，比如当你表示地铁站的布局图时，闸机就是一个单向通行的路径，形式上是有向图路径，其<strong>通行是单向的</strong>，表示家族谱系时同样，每个人只有一个父亲。在数据结构的表示上，其实单链表是一个有向图，每个结点只有一个后驱指针，其只能指向一个后驱结点，并被一个前驱结点指向，双向链表则是一个无向图，既有后驱指针也有前驱指针，每对相邻结点都是互相指向的，所以从结构上来看，<strong>无向图其实是一个特殊的有向图</strong>（每两个连通的结点都有两条弧，一来一去），但是在实际讨论时，我们还是分开来的，可以避免一些细节问题，但是在本质上我们要明白，其实它们区别不大，甚至相当多算法的无向图版本和有向图版本，代码都可能长一样</p><h6 id="简单图和完全图">简单图和完全图</h6><p>当图<code>G</code>满足：</p><ol><li>不存在重复边</li><li>不存在顶点到自身的边</li></ol><p>则称该图为<strong>简单图</strong>，非简单图称<strong>多重图</strong>。数据结构中不加说明，默认只讨论简单图</p><blockquote><p>简单图有形式简洁性，当我们讨论苏州是否可以到南京时，你有1条路还是20条路关我p事，然后你告诉我还有条路能出了苏州城绕城门一圈回到苏州？？？</p></blockquote><p>当无向图满足，任意两个顶点之间都存在边时，称<strong>无向完全图</strong>（完全图又称简单完全图，简单性是完全性的前置条件），含有n个顶点的无向完全图有<code>0.5*(n-1)*n</code>条边。当有向图满足，任意两个顶点之间都存在方向相反的两条弧时，称<strong>有向完全图</strong>，含有n个顶点的有向完全图有<code>(n-1)*n</code>条弧</p><p>一个无向完全图和一个有向非完全图：</p><img src="/images/algorithm/map/concepts/complete_graph.png" title="complete_graph" alt="complete_graph" style="max-width:70%;margin:auto;" /><h6 id="顶点的度和边权">顶点的度和边权</h6><p>度是衡量图中顶点交流性的指标（顶点相连的边越多，交流性越强）。对于无向图来说，某顶点的度其实就是其拥有的边的数目，记作<code>TD(v)</code>，假设某无向图有n个顶点和e条边，有<code>∑TD(v)=2*e</code>，也就是无向图所有顶点的度之和等于边数的2倍。对于有向图来说，某顶点的度分为出度<code>OD(v)</code>和入度<code>ID(v)</code>，假设某有向图有n个顶点和e条边，有<code>∑ID(v)=∑OD(v)=e</code>，也就是无向图所有顶点的出度之和等于入读之和，数值为边数</p><blockquote><p>一般来说，当图<code>G</code>满足<code>|E|&lt;|V|*log(|V|)</code>时，称稀疏图（也就是点多边少），反之称稠密图（点少边多），这在算法选型时很重要，因为部分算法在稀疏图上性能好，另一些在稠密图上性能好</p></blockquote><p>在一些图中，边可以拥有一个具有某种意义的数值，该数值称该边的权值，该边称带权边，这个图称为<strong>带权图</strong>，又称<strong>网</strong>。通常来说，边的权代表了通过这条边所需要的“代价”</p><h6 id="路径和连通性">路径和连通性</h6><p>在直观上，图就是一堆互相连接的点，用来表示某个现实模型，我把之前“人狗羊菜”的图改动了一下：</p><img src="/images/algorithm/map/concepts/man_dog_sheep_grass3.jpg" title="man_dog_sheep_grass3" alt="man_dog_sheep_grass3" style="max-width:70%;margin:auto;" /><blockquote><p>顶点v1到顶点vn的一条<strong>路径</strong>（或者<strong>通路</strong>）是指顶点的可通过序列[v1,v2…vn]，路径上<strong>边</strong>的数量称<strong>路径长度</strong>。顶点之间的最短路径长度称<strong>距离</strong>。当路径的起点和重点重叠时，称该路径为<strong>回路</strong>或<strong>环</strong>（形态上会形成一个圈，上图的<code>{3,4,5,6,7,8}</code>就是一个回路）</p></blockquote><blockquote><p>环路判定定理：若一个图有n个顶点且边数&gt;n-1，则该图必存在回路</p></blockquote><p>在“人羊狗菜”问题中，我们把原本过河的逻辑问题，转换成了顶点1到顶点10的可达性问题，像这种在无向图中，如果顶点v到顶点w有路径存在，则称v和w是连通的，在本例中顶点1到顶点10拥有两条路径。如果图<code>G</code>中任意两个顶点是连通的，则称图<code>G</code>是<strong>连通图</strong>，反之为<strong>非连通图</strong>。我们的“人狗羊菜”的就是一张连通图，也就是所有的点都连在了一个主体里，但是有时候会出现这样一种情况，有一个点“脱离”了图的主体，成为了一个不和任何点连通的“孤独”的顶点，这就称作<strong>孤点</strong>，下图中的顶点6就是一个孤点：</p><img src="/images/algorithm/map/concepts/isolated_point.png" title="isolated_point" alt="isolated_point" style="max-width:75%;margin:auto;" /><blockquote><p>孤点存在定理：若一个图有n个顶点且边数&lt;n-1，则该图必是非连通图（换言之，存在孤点）</p></blockquote><p>注意，连通性是无向图的概念，有向图有个类似的性质，叫做<strong>强连通性</strong>，在有向图中，如果从顶点v到顶点w和从顶点w到顶点v都存在路径，那么称这两个点是强连通的，任意两个结点都强连通的有向图称<strong>强连通图</strong></p><p>图的连通性和强连通性是一个图论核心性质，从数学结构上来说，连通性和强连通性都是一种<a href="https://zh.wikipedia.org/wiki/%E7%AD%89%E4%BB%B7%E5%85%B3%E7%B3%BB" target="_blank" rel="noopener">等价关系</a>，从直观上来说就是所有顶点之间都“<strong>有来有回</strong>”，从算法上讲，拥有连通性/强连通性的图，<strong>掌握了其中一个顶点，就可以掌握其中所有的顶点</strong>，就拿有向图来说，强连通性确保“数据的循环流动”，举个例子，有个金融分析师要研究最近十年的市场资金流动，他分析了12家公司的财务报表：</p><img src="/images/algorithm/map/concepts/strong_connectivity.png" title="strong_connectivity" alt="strong_connectivity" style="max-width:100%;margin:auto;" /><p>发现这根本不是一个强连通图，也就是说资金无法像生态循环一样在市场持续流动，而是最终进了4公司，10公司和12公司，这就不是一个健康的市场流动，而那这几家公司就很有可能是洗钱大户或者垄断联盟。这种问题很常见，同样的问题也可能发生在旅游过程中，很多景点之间只有单向车次，所以如果交通布局不是强连通的，很可能就出现你坐车去，结果玩了几个景点，最后要走路回来，可以说，<strong>连通性</strong>和<strong>强连通性</strong>保证了图的“<strong>连通健康</strong>”</p><blockquote><p>值得注意的是，和简单图一样，我们讨论的所有路径和回路，都是<strong>简单路径</strong>（路径中顶点不重复出现）和<strong>简单回路</strong>（除顶点自叠外，无重复顶点）</p></blockquote><h6 id="子图和连通分量">子图和连通分量</h6><p>设有两个图<code>G=(V,E)</code>和<code>G'=(V',E')</code>，若<code>V'</code>是<code>V</code>的子集且<code>E'</code>是<code>E</code>的子集，则称<code>G'</code>是<code>G</code>的子图。如果<code>G'</code>是<code>G</code>的子图，且<code>V(G')</code>=<code>V(G)</code>，则称<code>G'</code>是<code>G</code>的<strong>生成子图</strong>（只删边，不删点）</p><p>子图是一个图的重要概念，回到之前提到的连通性问题，不是所有图都是连通图，观察下面的无向图<code>G</code>：</p><img src="/images/algorithm/map/concepts/connected_component.png" title="connected_component" alt="connected_component" style="max-width:75%;margin:auto;" /><p>使用我们上文的连通性定义，可以清晰看到这个无向图中有3个“<strong>孤岛</strong>”，也就是<code>{1,2,3,4,5}</code>，<code>{6,7,8}</code>和<code>{9,10}</code>，在它们各自内部保证了连通性，成为了一个独立于整体的小“连通图”，像这一类无向图中的<strong>极大连通子图</strong>称为<strong>连通分量</strong>。本例的无向图拥有3个连通分量：</p><img src="/images/algorithm/map/concepts/connected_component2.png" title="connected_component2" alt="connected_component2" style="max-width:75%;margin:auto;" /><blockquote><p>值得注意的是，极大联通子图在是<code>G</code>的子图的同时，要包含该“孤岛”内尽可能多的边，不然只能是连通子图，而不是极大连通子图。同样的概念还有极小联通子图，在保证子图连通性的同时，包含尽可能少的边</p></blockquote><p>子图在图论中有很重要的应用，尤其是生成子图和生成树，再处理复杂图时，是一个很重要的简化和分析工具，就比如你遇到这么样一个迷宫问题：</p><img src="/images/algorithm/map/concepts/maze.png" title="maze" alt="maze" style="max-width:100%;margin:auto;" /><p>其实你很难一次性看出这个迷宫是不是整体相连的（连通图），有可能出现几条路是自闭的，不和主路相连，提前采取连通性分析可以少走弯路，如果发现自己的起点就是在一个不包括出口的自闭路径里（连通分量），那就直接放弃就行了，免得无用功</p><blockquote><p>既然无向图有连通分量，那自然同样的概念也发生在有向图中，有向图<code>G</code>的<strong>极大强连通子图</strong>称为该有向图的<strong>强连通分量</strong>。定义类似不多赘述</p></blockquote><h4 id="树和图的关系">树和图的关系</h4><blockquote><p>本节默认你对树有所了解，知道树的基本概念和形态即可</p></blockquote><p>首先来看一下数据结构的分级：</p><ul><li>一对一关系：线性表（背包，栈和队列）</li><li>一对多关系：树（一般树和二叉树）</li><li>多对多关系：图（有向图和无向图）</li></ul><p>从形态上讲，树其实是一种特殊的图，这里给出了5个顶点的2种边集组合，分别构成了树A和图B：</p><img src="/images/algorithm/map/concepts/tree.png" title="tree" alt="tree" style="max-width:55%;margin:auto;" /><p>可以从形态上清晰看到，我们的树A其实就是图B的一个<strong>生成子图</strong>（只删边不删点的子图，见上文定义），生成子图是一个很常用的工具，它在保证连通图的顶点完整性和连通性的同时，不断删除多余的边，来减少边集冗余，当边数删到极限了，图就退化成一棵树，这棵树就称为连通图的<strong>生成树</strong>，它是包含图中<strong>全部顶点</strong>的<strong>一个极小连通子图</strong></p><p>若连通图的顶点数为<code>n</code>，则它的生成树含有<code>n-1</code>条边，且对生成树而言：</p><ul><li>删去一条边，它就会变成非连通图</li><li>加上一条边，则会形成环路</li></ul><p>在非连通图中，各连通分量的生成树构成了非连通图的<strong>生成森林</strong>：</p><img src="/images/algorithm/map/concepts/tree2.png" title="tree2" alt="tree2" style="max-width:99%;margin:auto;" /><p>一个顶点的入度为0，其余顶点的入度均为1的有向图，称为<strong>有向树</strong>。同样是5个顶点，下图构造了一棵有向树和一个有向图：</p><img src="/images/algorithm/map/concepts/tree3.png" title="tree3" alt="tree3" style="max-width:80%;margin:auto;" /><p>可以看到上图的有向树其实是有向图的一个<strong>生成子图</strong></p><blockquote><p>我们通常只在无向图中讨论生成树，有向树和生成树定义类似，但不是同一个感念（不是有向图的生成树），不要混淆</p></blockquote><p>生成树和生成子图问题是很常见的一类图论问题，其核心在于“保证顶点集的完整性同时，减少边的数目”，经常用于一些需要“压缩时间和空间成本”的场合。举个例子，苏州市要修地铁了，但是地铁造价昂贵，市政府希望规划的几条线路能覆盖尽可能多的重要交通点（比如苏州火车站，观前街和市立医院），保证这些地点<strong>连通</strong>的同时，减少需要修建的地铁线，这个时候，设计师会将所有的比如30个站点先在地图上画出来，构造一个无向完全图，然后针对地区造价和施工难度，不断删除多余的边，最后获得一个接近<strong>生成树</strong>的<strong>生成子图结构</strong>，保证了地区<strong>连通性</strong>的同时，减少了建造成本。苏州市轨道交通布局图：</p><img src="/images/algorithm/map/concepts/tree4.png" title="tree4" alt="tree4" style="max-width:40%;margin:auto;" /><h4 id="图的数学表示法">图的数学表示法</h4><p>矩阵表示法是图论的数学表示，之前我们看见的都是图例，属于图形表示法，优点是直观，但是没有数学结构，无法被计算机理解，矩阵表示法就是可以表示一个图的最早的可用数学模型</p><p>这里先给出有向图A和无向图B的图例（图形表示法）：</p><img src="/images/algorithm/map/concepts/matrix.png" title="matrix" alt="matrix" style="max-width:50%;margin:auto;" /><blockquote><p>对于有向图A：<code>V={0,1,2,3}</code>且<code>E={e1=&lt;0,1&gt;,e2=&lt;0,2&gt;,e3=&lt;2,0&gt;,e4=&lt;2,3&gt;,e5=&lt;3,0&gt;,e6=&lt;3,1&gt;,e7=&lt;3,2&gt;}</code></p></blockquote><blockquote><p>对于有向图B：<code>V={0,1,2,3,4}</code>且<code>E={e1=(0,1),e2=(0,4),e3=(1,2),e4=(1,3),e5=(1,4),e6=(2,3),e7=(3,4)}</code></p></blockquote><h6 id="关联矩阵法">关联矩阵法</h6><p>对于一个图<code>G=(V,E)</code>，构造一个<code>n*m</code>的矩阵<code>M</code>，使得：</p><ol><li><code>|V|</code>=<code>n</code></li><li><code>|E|</code>=<code>m</code></li><li><code>M(i,j)</code>=<code>1</code>，表示顶点<code>vi</code>和边<code>ej</code>有关联</li><li><code>M(i,j)</code>=<code>0</code>，表示顶点<code>vi</code>和边<code>ej</code>没有关联</li></ol><p>那么称这个<code>n</code>行<code>m</code>列的矩阵<code>M</code>为图<code>G=(V,E)</code>的<strong>关联矩阵</strong>。上文图例中有向图和无向图的关联矩阵表示：</p><img src="/images/algorithm/map/concepts/matrix2.png" title="matrix2" alt="matrix2" style="max-width:75%;margin:auto;" /><blockquote><p>可以看到关联矩阵表示法其实蛮蛋疼的，有大量的数据空白，对于计算机来说利用率很低</p></blockquote><h6 id="邻接矩阵法">邻接矩阵法</h6><p>对于一个图<code>G=(V,E)</code>，构造一个<code>n*n</code>的矩阵<code>M</code>，使得：</p><ol><li><code>|V|</code>=<code>n</code></li><li><code>M(i,j)</code>=<code>1</code>，表示顶点<code>vi</code>和<code>vj</code>有邻接</li><li><code>M(i,j)</code>=<code>0</code>，表示顶点<code>vi</code>和<code>vj</code>没有邻接</li></ol><p>那么称这个<code>n</code>行<code>n</code>列的矩阵<code>M</code>为图<code>G=(V,E)</code>的<strong>邻接矩阵</strong>。上文图例中有向图和无向图的邻接矩阵表示：</p><img src="/images/algorithm/map/concepts/matrix3.png" title="matrix3" alt="matrix3" style="max-width:75%;margin:auto;" /><blockquote><p>邻接矩阵很适合计算机存储，是常用方案之一</p></blockquote><h6 id="矩阵压缩">矩阵压缩</h6><p>观察邻接矩阵法所表示的无向图，其实会发现它是沿方阵对角线对称的，所以在实际操作时，可以只存储它的<strong>上三角阵</strong>或者<strong>下三角阵</strong>，必要时可以将其压缩成一个一维向量，在之后讲图论存储结构的博文里会有描述，本篇不作详解</p><h4 id="几个特殊的图和图论的主要问题">几个特殊的图和图论的主要问题</h4><p>文章一开始就提过，图结构往往反应的是现实问题，所以图的种类千变万化，除了本文列举的几个基本概念外，有很多特殊图，都是针对不同问题出现的特殊结构，篇幅有限不作详解，仅仅罗列一下常见的，之后讲解相关问题的博文里会专门补充，这里混个眼熟即可：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">欧拉图</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%93%88%E5%AF%86%E9%A1%BF%E5%9B%BE" target="_blank" rel="noopener">哈密尔顿图</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%89%87%E5%9C%96" target="_blank" rel="noopener">正则图</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE" target="_blank" rel="noopener">二分图</a></li></ul><blockquote><p>详细内容现已并入<a href="https://bladexue.github.io/2020/08/25/algorithm/data-structure/graph-theory-guide/" target="_blank" rel="noopener">我的图论专栏</a></p></blockquote><h4 id="总结">总结</h4><p>本篇作为入门篇，主要介绍了图论作为数据结构的主要概念，大部分都是概念的描述，详细定义并分别这些概念，是学习图论的重要步骤（免得以后题目都看不懂），这其中的概念主要有3个：</p><ul><li>点边模型：了解图结构在数学上的集合本质，了解顶点集和边集是图的必要组成部分，并判断图的有向性，建立度和权的概念</li><li>路径和连通性：连通性是图的最<strong>核心</strong>特征，连通的图在算法上才有意义，路径问题是图论算法的一个大块</li><li>子图：图通常是一个拥有数百万结点的大型结构，子图可以很好的简化复杂图，树图转换也是一个很重要的图论算法</li></ul><p>本篇提及的概念都很基础，是必须掌握的，尤其是几个判定定理，在之后的算法中，通常会起到关键作用（如环路判定定理在循环依赖检查算法中非常有用）。希望我提的例子能帮你开始理解图这种结构，建立起良好的直观，篇幅较长，写作匆忙，勘误还请issue或者直接评论指出</p><h4 id="参考">参考</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA" target="_blank" rel="noopener">wiki-图论</a><br><a href="https://algs4.cs.princeton.edu/home/" target="_blank" rel="noopener">Algorithms, 4th Edition</a><br><a href="https://item.jd.com/11658913.html" target="_blank" rel="noopener">离散数学</a><br><a href="https://item.jd.com/12793968.html" target="_blank" rel="noopener">数据结构</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;图结构的基本概念，定理和问题&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;图结构是计算机中最重要最复杂的一类数据结构&lt;br&gt;
本篇重点讲解图论的基本概念，建立起对图结构的直观看法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图论专栏" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE%E8%AE%BA%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>图论专栏-导读</title>
    <link href="http://yoursite.com/2020/08/15/algorithm/data-structure/graph-theory/graph-theory-guide/"/>
    <id>http://yoursite.com/2020/08/15/algorithm/data-structure/graph-theory/graph-theory-guide/</id>
    <published>2020-08-15T14:43:37.000Z</published>
    <updated>2021-07-22T01:19:58.363Z</updated>
    
    <content type="html"><![CDATA[<h1>图论专栏导读-如何阅读本系列博客</h1><blockquote><p>图论专栏系列文章的导读和目录</p></blockquote><h4 id="关于专栏">关于专栏</h4><p>图论算法是一个重要的算法领域，其参与构成了几乎所有计算机领域的算法基础，图论作为数学和计算机分支前后发展了近300年，整个领域的研究至今依旧活跃。我把写的一系列图论的相关理解和算法笔记编辑成博客，收录成了一个专栏，本文是这些文章的导读，同时也是总索引，希望我的这些文章可以帮助你一窥图论的真实秘密</p><a id="more"></a><h4 id="阅读之前">阅读之前</h4><p>本专栏<strong>默认</strong>你已经有了数据结构和组合数学的一些基础，懂得单链表在内的基本数据结构，懂得辨识树的各个结构和性质，最好懂一些集合论和二元关系，如果想看相关的理论基础篇，也可以issue或者评论，我会把这些知识编辑成番外篇补充在文后</p><p>专栏内的文章最早是我的上课笔记和辅导学弟学妹的讲义，现编辑成博文，每篇文章都可以单独阅读，但是其中的储备知识是前驱的，建议从图的概念开始顺序阅读，博文中出现的代码均收录在<a href="https://github.com/bladeXue/graph-algorithm-kit" target="_blank" rel="noopener">graph-algorithm-kit</a></p><h4 id="阅读之后">阅读之后</h4><p>这里列出了我认为的一个程序员读完本系列后必须掌握的<strong>硬知识</strong>：</p><ol><li>图的基本概念（点边模型，连通性问题，子图概念和树图转换）</li><li>图的4种存储（矩阵，表，十字链表和多重表）和基本操作（封装和核心API）</li><li>图的2个核心搜索（BFS和DFS）</li><li>图的4个重点应用问题（最小生成树，最短路径，拓扑排序，关键路径）</li></ol><p>以及一些我认为比较重要的<strong>软实力</strong>：</p><ol><li>对实际问题进行建模</li><li>针对问题场景修改存储结构</li><li>将复杂的图论问题转换成已知问题的解</li><li>分辨不可解问题（有些问题在图论上属于无定论）</li></ol><h4 id="图的概念和基本性质">图的概念和基本性质</h4><blockquote><p>基础篇必读</p></blockquote><ol><li><a href="/2020/08/16/algorithm/data-structure/graph-theory/graph-theory-first-learn-and-concepts/">初识图论-概念和模型</a></li><li>二部图的概念</li><li>欧拉图和一笔画问题</li><li>哈密尔顿图的概念</li></ol><h4 id="图的存储模型">图的存储模型</h4><blockquote><p>要想使用图，必须先将图从纯粹数学模型，转换为计算机可以理解和存储的代码结构</p></blockquote><blockquote><p>记住图的设计重点就是<strong>把图的表示和实现分离开来</strong>，良好的封装是代码可读性的保障</p></blockquote><ol><li><a href="/2020/08/19/algorithm/data-structure/graph-theory/graph-theory-storage-structure/">图的存储结构及封装</a></li><li>AOE和AOV</li></ol><h4 id="5个基本问题和8个核心算法">5个基本问题和8个核心算法</h4><h6 id="1-图的搜索和连通性问题">1. 图的搜索和连通性问题</h6><ul><li><a href="/2020/09/04/algorithm/data-structure/graph-theory/graph-theory-search/">深度优先搜索和广度优先搜索</a></li><li>连通性问题</li></ul><h6 id="2-最短路径问题">2. 最短路径问题</h6><ul><li><a href="/2020/09/05/algorithm/data-structure/graph-theory/graph-theory-dijkstra-algorithm/">Dijkstra算法</a></li><li>Floyd-Warshall算法</li></ul><h6 id="3-最小生成树问题">3. 最小生成树问题</h6><ul><li>Prim算法</li><li>Kruskal算法</li></ul><h6 id="4-拓扑排序问题">4. 拓扑排序问题</h6><ul><li>TSA</li></ul><h6 id="5-关键路径问题">5. 关键路径问题</h6><ul><li>CPA</li></ul><h4 id="图论算法进阶">图论算法进阶</h4><ul><li>欧拉图，哈密尔顿图和二部图</li><li>填色问题和四色原理</li><li>网络流问题</li><li>强连通性问题</li><li>子图覆盖问题</li><li>同构问题</li><li>自动机</li></ul><h4 id="图论题集">图论题集</h4><ul><li>割点问题</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;图论专栏导读-如何阅读本系列博客&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;图论专栏系列文章的导读和目录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;关于专栏&quot;&gt;关于专栏&lt;/h4&gt;
&lt;p&gt;图论算法是一个重要的算法领域，其参与构成了几乎所有计算机领域的算法基础，图论作为数学和计算机分支前后发展了近300年，整个领域的研究至今依旧活跃。我把写的一系列图论的相关理解和算法笔记编辑成博客，收录成了一个专栏，本文是这些文章的导读，同时也是总索引，希望我的这些文章可以帮助你一窥图论的真实秘密&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图论专栏" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE%E8%AE%BA%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>手工实现Java热加载</title>
    <link href="http://yoursite.com/2020/08/15/java/hotswap/java-hot-swap-mechanism/"/>
    <id>http://yoursite.com/2020/08/15/java/hotswap/java-hot-swap-mechanism/</id>
    <published>2020-08-15T08:39:00.000Z</published>
    <updated>2021-07-22T01:19:58.370Z</updated>
    
    <content type="html"><![CDATA[<h4 id="施工中…">施工中…</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;施工中…&quot;&gt;施工中…&lt;/h4&gt;

      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>缓存置换算法和LRU实现</title>
    <link href="http://yoursite.com/2020/08/14/algorithm/classical/classical-algotithm-for-cache-replacement/"/>
    <id>http://yoursite.com/2020/08/14/algorithm/classical/classical-algotithm-for-cache-replacement/</id>
    <published>2020-08-14T07:33:30.000Z</published>
    <updated>2021-07-22T01:19:58.361Z</updated>
    
    <content type="html"><![CDATA[<h1>缓存置换的常见策略和LRU算法实现</h1><blockquote><p>常见于缓存池更新方面的应用<br>内核设计的页面置换机制中有重要应用</p></blockquote><a id="more"></a><h4 id="开篇">开篇</h4><p>就算不是学计算机的，也会对缓存技术有所耳闻，包括“浏览器缓存”和“手机缓存垃圾”在内的各种名词，其实早就给你塑造了一个缓存的大概形象，本篇不会纠结缓存的定义到底是什么，主要是介绍缓存技术在计算机内存和程序设计方面的实现和一些常见案例，建立起对缓存技术的一个比较清晰的概念</p><h4 id="早期CPU的困境">早期CPU的困境</h4><p>缓存，英文Cache，最早出现于1967年的一篇电子设计论文，Cache原本是一个法语词，在论文中被作者用来指意<code>safekeeping storage</code>。在以前16位机的时代，CPU和内存都很慢，不存在什么Cache技术，运行指令时由CPU直接访问内存，到了80386的32位机时代，出现了Cache技术，众所周知，在现代计算机体系结构中，存储是拥有级别的，最快的存储单元是CPU的寄存器，同时也最昂贵，通常只负责存储会参与直接计算的数据和指令，其次是内存，内存比CPU寄存器慢，但是造价相对便宜，进入21世纪后，随着内存技术的升级，8GB的DDR4内存条也只要几百块就能买到了（而一颗拥有若干KB存储的Intel处理器就大几千了），最便宜的则是外部存储设备了，也就是常见的硬盘技术，大容量，造价便宜，但是数据读写也最慢。由此可知，在Cache技术出现之前，CPU里的寄存器虽然很快，但是程序的指令是加载在内存里的，CPU要执行指令，就要到内存中去读取一条条的指令，就算你寄存器计算时再快，但是内存的IO瓶颈在那里，CPU在等待内存返回指令之前就只等“干着急”，所以计算机的运行速度一直上不去</p><h4 id="救世主的到来：Cache技术">救世主的到来：Cache技术</h4><p>但是随着80386系列的处理器的出现，情况就不同了，80386的芯片组增加了对可选的Cache的支持，高级主板可以携带64KB。提供“缓存”的目的是为了让数据访问的速度适应CPU的处理速度，上文提过了，在Cache技术出现之前，CPU直接访问内存，内存如果慢了，CPU再快也要等内存，而出现了Cache之后，当CPU处理数据时，它会先到Cache中去寻找，如果数据因之前的操作已经读取而被暂存其中，那就直接读取Cache中的指令结果，这样一来，CPU再也不用每次都等“慢吞吞”的内存了，整体的计算效率也上去了</p><blockquote><p>Cache技术能够成功的原理之一，就是所谓的“程序执行的局域性原理”，用人话讲就是“一定程序执行时间和空间内，被访问的代码集中于一部分”，除了C语言之外，包括Java在内的很多编程语言都会使用Cache机制提高自己的执行速度，有兴趣的可以了解一下Java的voliate关键字</p></blockquote><p>下图是Intel Core i5-4285U的CPU三级缓存示意图（随便看看就行了，本篇不是讲CPU的）：<br><img src="/images/algorithm/cache/javabf_cpu_01.png" title="javabf_cpu_01" alt="javabf_cpu_01" style="max-width:80%;margin:auto;" /></p><h4 id="广义缓存技术">广义缓存技术</h4><p>而在现在，缓存技术不再仅仅是指CPU的Cache了，而是在各类计算机问题中都找到了应用，我们称之为广义缓存技术（其实我们现在在大部分情况下提到的都是广义的缓存技术），根据我们上文了解到的Cache技术的历史，可以了解到所谓的Cache其实有<strong>3个基本属性</strong>：</p><ol><li>热数据<br>根据“局部性原理”，系统目前访问的数据A，极有可能在不久的未来二次访问，所以我们就将这个数据暂存起来，之后再访问的时候就免得再找一次了，直接从缓存中拿，提高了系统的整体速度。当CPU执行其它程序，或者当前热数据已经修改时，再通过一定的机制更新热数据，保证缓冲区存放的是“最要紧的数据”</li><li>不对等存储<br>Cache的出现说到底是CPU的高速存储和内存的低速存储之间的读写速度不对等造成的，这个“不对等”现象其实非常常见，比如Redis作为Mysql的数据缓存，就是因为关系数据库每次读写都是基于磁盘的，非常慢，但是Redis作为键值数据库运行在内存中，大大提高了关系数据库中的“热数据”（比如某个用户的微博访问量）的访问速度，在高并发环境下是非常有效的策略</li><li>有限容量<br>在讲CPU时提到了，不对等存储的出现，本质上还是存储设备的造价问题，所以你在高速设备（容量A）和低速设备（容量B）之间提供的缓存区（容量C）通常会有<code>A&lt;C&lt;B</code>这样的关系，所以这就导致了缓存技术能提供的容量也是有限的，当缓存容量用尽时，就会出现更新策略，也就是本文的重点之一：Cache Replacement Policies缓存置换机制</li></ol><h4 id="缓存置换的4个基本策略">缓存置换的4个基本策略</h4><p>让我们继续回到富含激情的80年代，当时能使用的计算机多是16位机，比如经典的8086体系，拥有20位的地址总线，也就是说我们的内存其实只有2^20B=1MB的容量，但是数据文件可没有因为你是早期计算机就变小，假设你在当时的斯坦福大学，要检阅学校服务器上的一个2MB大小的学生信息文件，你怎么办？</p><p>通过上文的阅读，我们知道一个缓存机制的3个特点：<code>热数据</code>，<code>不对等存储</code>和<code>有限容量</code>在我们的这个场景里其实全有了，所以有了以下解决方案，也就是经典的“大文件局部加载方案”（又是一个比我年纪还大的算法）：</p><ol><li>将文件分片，2MB的文件分成2048片，每片1KB大小，只有当你的阅读器读到当前的文件片时，才将文件加载进内存，剩下的留在硬盘里</li><li>计算机读文件时，会先检索内存中是否已经加载过目标文件片了，如果已加载，则直接从内存中取</li><li>如果内存满了，那就按照<strong>某些规则</strong>，放弃一些“旧的”文件片，给新来的文件片挪位置</li></ol><p>这里的<strong>某些规则</strong>其实就是缓存置换策略，常见策略一共4个：</p><ol><li>FIFO：First In First Out，最先进入的内容作为替换对象</li><li>LRU：Least Recently Used，最久没有访问的内容作为替换对象</li><li>LFU：Least Frequently Used，最近最少使用的内容作为替换对象</li><li>MRU：Most Recently Used，最近使用的内容作为替换对象</li></ol><blockquote><p>其实策略还有非常多，取得应用的有几十个，这几个时属于比较常见比较常见的</p></blockquote><h4 id="Cache-Hit-Miss和缓存命中率">Cache Hit/Miss和缓存命中率</h4><p>还是上面的大文件分片加载的案例，既然缓存置换策略那么多，那么肯定会出现良莠不齐的情况，那么就需要一个衡量标准，下面接触两个概念：</p><ul><li>Cache Hit/Miss<br>Cache Hit又称缓存命中，当我们的程序发出了一个文件片的加载指令，我们会查询文件片缓存池中是否有这个文件片，如果有，那就表示Cache Hit了，我们直接从缓存中读取这个文件片，反之如果发现这个文件片不在缓存中，那么就表示Cache Miss，我们需要出发一个I/O读写任务，付出额外的时间代价去硬盘读取目标文件片</li><li>缓存命中率<br>根据Cache Hit/Miss的定义，我们自然是希望Cache Hit的情况多于Miss的情况，Hit越多，说明我们的缓存确实生效了，所以出现了缓存命中率的公式：<code>Hit Rate=(Cache Hit)/(Cache Hit+Cache Miss)</code></li></ul><p>假设我们的缓存区容量为：3个文件片，现在我们的程序发出的读写序列为<code>{7,0,1,2,0,3,0,4,2,3,0,3,2,1,2,0,1,7,0,1}</code>，其中的数字代表文件片编号：</p><p>现在我们构造了一个空表，可用来理解各个策略在实施时的不同：</p><table><thead><tr><th>请求序号</th><th>7</th><th>0</th><th>1</th><th>2</th><th>0</th><th>3</th><th>0</th><th>4</th><th>2</th><th>3</th><th>0</th><th>3</th><th>2</th><th>1</th><th>2</th><th>0</th><th>1</th><th>7</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>缓存片0</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>缓存片1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>缓存片2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>结果</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>读取</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>丢弃</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>结果一栏是指是否命中，H=Cache Hit &amp;&amp; M=Cache Miss</p></blockquote><h6 id="FIFO：先进先出算法">FIFO：先进先出算法</h6><p>在这个策略中，发生Cache Miss时，会优先丢弃<strong>最早进入缓存</strong>的文件片，也就是说每次都淘汰当前缓存中在内存中驻留时间最长的那个文件片。在本例中，Hit了5次，Miss了15次，命中率为25%</p><table><thead><tr><th>请求序号</th><th>7</th><th>0</th><th>1</th><th>2</th><th>0</th><th>3</th><th>0</th><th>4</th><th>2</th><th>3</th><th>0</th><th>3</th><th>2</th><th>1</th><th>2</th><th>0</th><th>1</th><th>7</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>缓存片0</td><td>7</td><td>7</td><td>7</td><td>2</td><td>2</td><td>2</td><td>2</td><td>4</td><td>4</td><td>4</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>7</td><td>7</td><td>7</td></tr><tr><td>缓存片1</td><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>3</td><td>3</td><td>3</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td></tr><tr><td>缓存片2</td><td></td><td></td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td><td>1</td></tr><tr><td>结果</td><td>M</td><td>M</td><td>M</td><td>M</td><td>H</td><td>M</td><td>M</td><td>M</td><td>M</td><td>M</td><td>M</td><td>H</td><td>H</td><td>M</td><td>M</td><td>H</td><td>H</td><td>M</td><td>M</td><td>M</td></tr><tr><td>读取</td><td>7</td><td>0</td><td>1</td><td>2</td><td></td><td>3</td><td>0</td><td>4</td><td>2</td><td>3</td><td>0</td><td></td><td></td><td>1</td><td>2</td><td></td><td></td><td>7</td><td>0</td><td>1</td></tr><tr><td>丢弃</td><td></td><td></td><td></td><td>7</td><td></td><td>0</td><td>1</td><td>2</td><td>3</td><td>0</td><td>4</td><td></td><td></td><td>2</td><td>3</td><td></td><td></td><td>0</td><td>1</td><td>2</td></tr></tbody></table><h6 id="LRU：最近久未用算法">LRU：最近久未用算法</h6><p>发生Cache时，会检索使用记录，保留最近用过的文件片（也就是丢弃<strong>最近没用过</strong>的文件片），这个其实是局部性原理的反应，程序认为过去一段时间内不曾被访问的页面，在最近的将来也不会被访问，所以它总是丢弃最近一段时间内最久不用的文件片。在本例中，Hit了10次，Miss了10次，命中率为50%</p><table><thead><tr><th>请求序号</th><th>7</th><th>0</th><th>1</th><th>2</th><th>0</th><th>3</th><th>0</th><th>4</th><th>2</th><th>3</th><th>0</th><th>3</th><th>2</th><th>1</th><th>2</th><th>0</th><th>1</th><th>7</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>缓存片0</td><td>7</td><td>7</td><td>7</td><td>2</td><td>2</td><td>2</td><td>2</td><td>4</td><td>4</td><td>4</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>缓存片1</td><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>缓存片2</td><td></td><td></td><td>1</td><td>1</td><td>1</td><td>3</td><td>3</td><td>3</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td><td>7</td><td>7</td><td>7</td></tr><tr><td>结果</td><td>M</td><td>M</td><td>M</td><td>M</td><td>H</td><td>M</td><td>H</td><td>M</td><td>M</td><td>H</td><td>M</td><td>H</td><td>H</td><td>M</td><td>H</td><td>H</td><td>H</td><td>M</td><td>H</td><td>H</td></tr><tr><td>读取</td><td>7</td><td>0</td><td>1</td><td>2</td><td></td><td>3</td><td></td><td>4</td><td>2</td><td></td><td>0</td><td></td><td></td><td>1</td><td></td><td></td><td></td><td>7</td><td></td><td></td></tr><tr><td>丢弃</td><td></td><td></td><td></td><td>7</td><td></td><td>1</td><td></td><td>2</td><td>3</td><td></td><td>4</td><td></td><td></td><td>0</td><td></td><td></td><td></td><td>2</td><td></td><td></td></tr></tbody></table><blockquote><p>这里是为了画表方便，正式编写时，缓存片的存储顺序会稍有不同，下文讲实现时会提及</p></blockquote><h6 id="LFU：最近低频淘汰算法">LFU：最近低频淘汰算法</h6><p>这个策略有一点点类似LRU，但是这里衡量的并不是文件片最近有没有被使用（时间戳），而是在最近一段时间内，它被访问的次数，访问率低的文件片会被丢弃。在实现上，其实就是给每个文件片加一个计数器，访问了就喜加一，当出现缓存不够时，检索当前缓存中，计数器最小的那个，把它的计数器清零后踢出缓存（好惨）。这个算法其实经常和LRU一起使用，因为如果你发现目前缓存区里所有文件片的计数器都一个大小，那你就要考虑通过LRU来抉择了（如下图的第4次Miss）。在本例中，Hit了9次，Miss了11次，命中率为45%</p><table><thead><tr><th>请求序号</th><th>7</th><th>0</th><th>1</th><th>2</th><th>0</th><th>3</th><th>0</th><th>4</th><th>2</th><th>3</th><th>0</th><th>3</th><th>2</th><th>1</th><th>2</th><th>0</th><th>1</th><th>7</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>缓存片0</td><td>7(1)</td><td>7(1)</td><td>7(1)</td><td>2(1)</td><td>2(1)</td><td>2(1)</td><td>2(1)</td><td>4(1)</td><td>4(1)</td><td>3(1)</td><td>3(1)</td><td>3(2)</td><td>3(2)</td><td>1(1)</td><td>1(1)</td><td>1(1)</td><td>1(2)</td><td>7(1)</td><td>7(1)</td><td>1(1)</td></tr><tr><td>缓存片1</td><td></td><td>0(1)</td><td>0(1)</td><td>0(1)</td><td>0(2)</td><td>0(2)</td><td>0(3)</td><td>0(3)</td><td>0(3)</td><td>0(3)</td><td>0(4)</td><td>0(4)</td><td>0(4)</td><td>0(4)</td><td>0(4)</td><td>0(5)</td><td>0(5)</td><td>0(5)</td><td>0(6)</td><td>0(6)</td></tr><tr><td>缓存片2</td><td></td><td></td><td>1(1)</td><td>1(1)</td><td>1(1)</td><td>3(1)</td><td>3(1)</td><td>3(1)</td><td>2(1)</td><td>2(1)</td><td>2(1)</td><td>2(1)</td><td>2(2)</td><td>2(2)</td><td>2(3)</td><td>2(3)</td><td>2(3)</td><td>2(3)</td><td>2(3)</td><td>2(3)</td></tr><tr><td>结果</td><td>M</td><td>M</td><td>M</td><td>M</td><td>H</td><td>M</td><td>H</td><td>M</td><td>M</td><td>M</td><td>H</td><td>H</td><td>H</td><td>M</td><td>H</td><td>H</td><td>H</td><td>M</td><td>H</td><td>M</td></tr><tr><td>读取</td><td>7</td><td>0</td><td>1</td><td>2</td><td></td><td>3</td><td></td><td>4</td><td>2</td><td>3</td><td></td><td></td><td></td><td>1</td><td></td><td></td><td></td><td>7</td><td></td><td>1</td></tr><tr><td>丢弃</td><td></td><td></td><td></td><td></td><td></td><td>1</td><td></td><td>2</td><td>3</td><td>4</td><td></td><td></td><td></td><td>3</td><td></td><td></td><td></td><td>1</td><td></td><td>7</td></tr></tbody></table><blockquote><p>如果表太长了导致滚动条，请把浏览器窗口拉长<br>7(1)表示文件片7的计数器为1<br>LFU算法有一个小问题，那就是如果某个文件片在载入缓冲区后被大量读写，然后程序就再也不访问了，这种情况下，就会因为之前大量访问给文件片制造了一个超大的计数器，就会变成“仗着祖上阔的恶霸”，导致“赖在缓存区不走”，所以正式使用时，计数器都是有时效的</p></blockquote><h6 id="MRU：最近使用淘汰算法">MRU：最近使用淘汰算法</h6><p>乍一听蛮奇怪的，当缓存区满时，这个策略会淘汰最近只用过的文件片，这不是给自己添堵？但其实这个在某些场合非常使用，比如你要对某个大型数据集进行循环扫描（又称循环访问模式，由于MRU缓存算法倾向于保留较旧的数据，因此它们比LRU的命中率高，这个算法的图留给观众老爷们自己画吧，当是测试了（其实就是作者偷懒）</p><h4 id="缓存置换策略的选择">缓存置换策略的选择</h4><p>上面是给出了4种基本的置换策略实现，但是可以看出，这些算法的效率是极度依赖输入队列的，也就是<strong>读写序列</strong>，在某些情况下，可能LRU命中率高，换个情况可能就是MRU高了，所以类似虚拟内存这种使用了缓存/页面置换算法的场景，其实是准备了多种策略，监控其命中率指标，根据系统任务的表现，可以做到随时切换，我们在设计自己的缓存系统时也可以这么考虑</p><p>而且默认环境下，我们一般会采用LRU+LFU的做法，在各种测试中，这一类的组合表现比较稳定</p><h4 id="LRU-Cache算法的实现">LRU Cache算法的实现</h4><p>为了加强对算法的理解，我们来实现一下LRU策略的缓存置换算法，LRU的策略可能很简单，但是在各个场景（比如内核）下进行应用时会产生大量的变种，我们这里给出的示例属于“面试特供版”，因为企业在笔试时很喜欢问LRU一类的问题，考察对数据结构的掌握。我们这里只实现LRU，其它策略也基本大同小异，观众老爷可以自行摸索</p><p>在实际编写代码之前，我们来回顾一下，LRU的基本策略：</p><ul><li>维护一个限制大小的缓存池</li><li>当缓存空间满了的时候，将最近<strong>最久少使用</strong>的数据从缓存空间中删除，以增加可用的缓存空间来缓存新的数据</li></ul><h6 id="LRU的核心数据结构">LRU的核心数据结构</h6><p>因为我们要定位<strong>最久少使用</strong>的数据，所以我们需要一个可以记录时间顺序的结构，在这里我们使用增强型的链表，也就是双向链表，现在确定一下我们的算法基本步骤：</p><ul><li>设置一个双向链表visited_list模拟循环队列，用来记录数据的新旧（仅记录数据的编号），新数据插入到头部，旧数据从尾部丢弃</li><li>设置一个字典dict&lt;数据编号:数据内容&gt;作为真正的数据存储池</li><li>读取请求来后，访问字典dict来判定Cache Hit/Miss</li><li>Cache Hit后，更新visited_list，Hit了的数据编号会被取出，插入到头部，这样确保从尾部丢弃的确实是<strong>最久且最少</strong>被使用的数据（因为新数据都被更新去头部了，而根据队列的特性，靠近尾部的都是老数据），从dict中返回对应的数据内容</li><li>Cache Miss后，查询缓存是否富余，富余则直接向dict和visited_list插入新数据，不足则会删除visited_list的尾部数据，删除dict中对于的数据内容，将新数据调入并插入到visited_list头部和dict</li></ul><p>完整的Java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.blade.app.lru;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 维护一个类似双向链表的数据结构，包含前驱后继以及键值结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    Node next;</span><br><span class="line">    Node prev;</span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 散列提供O(1)的读写</span></span><br><span class="line">    HashMap&lt;Integer, Node&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 头指针，head-&gt;next指向最近访问的结点</span></span><br><span class="line">    Node head;</span><br><span class="line">    <span class="comment">// 尾指针，head-&gt;prev指向最久访问的结点</span></span><br><span class="line">    Node tail;</span><br><span class="line">    <span class="comment">// 容量</span></span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="comment">// 结点计数</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 计数</span></span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        head = <span class="keyword">new</span> Node();</span><br><span class="line">        tail = <span class="keyword">new</span> Node();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环队列</span></span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.next = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果 key 在 HashMap 中，先拿到该结点，删除结点，再插入结点。</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            Node node = map.get(key);</span><br><span class="line">            remove(node);</span><br><span class="line">            insert(node);</span><br><span class="line">            <span class="keyword">return</span> map.get(key).val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果不在就返回 -1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果 key 在 HashMap 中，和 get 类似，也是先拿到该结点，删除结点，再插入结点。</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            Node node = map.get(key);</span><br><span class="line">            node.val = value;</span><br><span class="line">            remove(node);</span><br><span class="line">            insert(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 key 不在 HashMap 中，那么是一个新的结点，直接插入即可。</span></span><br><span class="line">            Node node = <span class="keyword">new</span> Node(key, value);</span><br><span class="line">            insert(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 在 map 中移除结点前，先将双向链表的指针指向进行修改</span></span><br><span class="line">            Node prev = node.prev;</span><br><span class="line">            Node next = node.next;</span><br><span class="line">            node.prev = <span class="keyword">null</span>;</span><br><span class="line">            node.next = <span class="keyword">null</span>;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            map.remove(node.key);</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        Node next = head.next;</span><br><span class="line">        head.next = node;</span><br><span class="line">        node.next = next;</span><br><span class="line">        next.prev = node;</span><br><span class="line">        node.prev = head;</span><br><span class="line">        map.put(node.key, node);</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">// 如果结点数超过可允许容量，将 least recently 的结点移除</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; capacity) &#123;</span><br><span class="line">            remove(tail.prev);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLRUCache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 容量定为4</span></span><br><span class="line">        LRUCache cache = <span class="keyword">new</span> LRUCache(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化节点</span></span><br><span class="line">        Node[] nodes = <span class="keyword">new</span> Node[<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            nodes[i] = <span class="keyword">new</span> Node(i, i * <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义访问序列</span></span><br><span class="line">        <span class="keyword">int</span>[] visit_q = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : visit_q) &#123;</span><br><span class="line">            Node n = nodes[i];</span><br><span class="line">            cache.put(n.key, n.val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"end."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本例中，我使用的访问队列为<code>{0, 1, 2, 4, 5, 2, 3, 4, 3, 0, 1, 4, 5, 3}</code>，老规矩可以画出下面的过程图：</p><table><thead><tr><th>请求序号</th><th>0</th><th>1</th><th>2</th><th>4</th><th>5</th><th>2</th><th>3</th><th>4</th><th>3</th><th>0</th><th>1</th><th>4</th><th>5</th><th>3</th></tr></thead><tbody><tr><td>结点0</td><td>0</td><td>1</td><td>2</td><td>4</td><td>5</td><td>2</td><td>3</td><td>4</td><td>3</td><td>0</td><td>1</td><td>4</td><td>5</td><td>3</td></tr><tr><td>结点1</td><td></td><td>0</td><td>1</td><td>2</td><td>4</td><td>5</td><td>2</td><td>3</td><td>4</td><td>3</td><td>0</td><td>1</td><td>4</td><td>5</td></tr><tr><td>结点2</td><td></td><td></td><td>0</td><td>1</td><td>2</td><td>4</td><td>5</td><td>2</td><td>2</td><td>4</td><td>3</td><td>0</td><td>1</td><td>4</td></tr><tr><td>结点3</td><td></td><td></td><td></td><td>0</td><td>1</td><td>1</td><td>4</td><td>5</td><td>5</td><td>2</td><td>4</td><td>3</td><td>0</td><td>1</td></tr><tr><td>结果</td><td>M</td><td>M</td><td>M</td><td>M</td><td>M</td><td>H</td><td>M</td><td>H</td><td>H</td><td>M</td><td>M</td><td>H</td><td>M</td><td>M</td></tr></tbody></table><blockquote><p>这个图和之前的不太一样，因为这里的结点0-3时有顺序的，每次更新的数据都会被提到结点0的位置，而每次也都是从结点3淘汰数据<br>如果你仔细观察，会发现我们的LRU表有明显的阶梯型</p></blockquote><h4 id="一点碎碎念">一点碎碎念</h4><p>到此，“大文件局部加载”的案例就结束了，剩下还有一点碎碎念，有兴趣的朋友可以自己扩展一下：</p><ul><li>Linux中的虚拟内存概念就是基于页面置换算法（缓存置换的一种实现），通过这种方式，物理内存不再是程序运行的限制，假设你有8GB的物理内存，但是虚拟内存可以达到16GB，溢出的内存直接以交换区的形式放到磁盘上就行，但是时刻注意，置换算法是典型的时间换空间，你的内存虽然扩大了，但是调度是要吃CPU的。这种方式又叫“虚拟扩容”</li><li>“抖动现象”是指数据频繁进出缓存区，如果针对某个的访问队列使用了不合适的置换算法，就会出现这种情况，命中率下降，消耗了CPU的同时，没有获得缓存的优势</li></ul><h4 id="总结">总结</h4><p>到此为止，关于缓存置换算法就草草讲完了，实现只写了LRU的Java实现，感兴趣的可以去看看Linux内核的源码，里面对置换算法是真的玩出花了，如果感觉不太理解的话，可以自己去看一下wiki或者动手把表画一下。如果你发现了文章错误，记得在评论区指出QAQ</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;缓存置换的常见策略和LRU算法实现&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;常见于缓存池更新方面的应用&lt;br&gt;
内核设计的页面置换机制中有重要应用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="经典算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>有序全排列问题</title>
    <link href="http://yoursite.com/2020/07/15/algorithm/exercise/question-next-permutation/"/>
    <id>http://yoursite.com/2020/07/15/algorithm/exercise/question-next-permutation/</id>
    <published>2020-07-15T11:26:45.000Z</published>
    <updated>2021-07-22T01:19:58.366Z</updated>
    
    <content type="html"><![CDATA[<h1>“下一个全排列”问题</h1><blockquote><p>全排列问题和字典序算法的融合问题<br>帮助理解序理论的重要材料</p></blockquote><a id="more"></a><h4 id="问题描述">问题描述</h4><p>排列问题是组合数学中的基本问题之一，给定数组<code>{1,2,3}</code>，对其中的元素进行重新排列，会有6种不同的序列，分别是<code>{1,2,3}</code>，<code>{1,3,2}</code>，<code>{2,1,3}</code>，<code>{2,3,1}</code>，<code>{3,1,2}</code>和<code>{3,2,1}</code></p><p>将这6个排列按照数字从小到大排个前后，有下表：</p><table><thead><tr><th>序号</th><th>排列</th></tr></thead><tbody><tr><td>1</td><td>{1,2,3}</td></tr><tr><td>2</td><td>{1,3,2}</td></tr><tr><td>3</td><td>{2,1,3}</td></tr><tr><td>4</td><td>{2,3,1}</td></tr><tr><td>5</td><td>{3,1,2}</td></tr><tr><td>6</td><td>{3,2,1}</td></tr></tbody></table><p>仔细观察一下，这其中其实是一种类似英语词典中，单词的排序，也就是a-开头的单词在b-开头单词的前面，ab-开头的单词在am-开头的单词的前面，这种排序法则就是<strong>字典序</strong>，详细定义如下：</p><blockquote><p>给定两个偏序集A和B，(a,b)和(a′,b′)属于笛卡尔积A×B，则字典序定义为：(a,b)≤(a′,b′)，当且仅当a&lt;a′或(a=a′且b≤b′)<br>结果是偏序（如果A和B是全序, 那么结果也是全序）</p></blockquote><p>这里的<a href="https://zh.wikipedia.org/wiki/%E5%81%8F%E5%BA%8F%E5%85%B3%E7%B3%BB" target="_blank" rel="noopener">偏序关系</a>是离散数学的序理论中的概念，有些生疏的可以把《离散数学》的书翻出来看看</p><p>到这里我们的问题就可以提出来了：从当前排列生成字典序刚好比它大的下一个排列</p><h4 id="问题分析">问题分析</h4><p>在这里我们先来观察一种现象，我称之为“地板天花板”现象，现在给定<code>{1,2,3,4}</code>四个数字，可以排列出P(4,4)=24个四位数，其中有：</p><ul><li>天花板：也就是最大的数字排列4321，也称<strong>降序列</strong>（从第一个数字到最后一个数字都在减少）</li><li>地板：也就是最小的数字序列1234，也称<strong>升序列</strong>（从第一个数字到最后一个数字都在变大）</li></ul><p>观察上面的两个数，可以很容易看出，天花板和地板是正好反过来的，我们这个时候再来看另一个例子，这个例子里，我们使用<code>{1,3,4,5}</code>四个数字，并且固定首位为4，那我们可以得到天花板和地板：</p><ul><li>天花板：4531，531是一个3位降序</li><li>地板：4135，135是一个3位升序</li></ul><p>现在我们的重点来了，我们都知道一层楼的天花板肯定比地板高，就像上面的531比135大一样，我称之为做“同1层的天花板比地板高”原理，在这之外还有一个“5楼的地板比4楼的天花板高”原理。还是上面的两个数字4531和4135，我们把4531看作“4楼的天花板531”，4135看作“4楼的地板135”，如果我们把首位的4换成5，那就有“4楼的地板135”变成“5楼的地板134”，也就是5134，这个5134其实就是4531的“下一个字典序排列”</p><p>到此为止，我们的算法流程就算是出来了，有4步：</p><ol><li>找到排列中最右侧的一个升序，记录其首地址i（找到这层楼的地板），并记录x=a[i]</li><li>找到排列中i右侧最后一个比a[i]大的位置j（找到下上层楼的层数），并记录y=a[j]</li><li>交换x和y</li><li>将i之后的尾部整个反转</li></ol><p>拿21543举个例子：</p><ol><li>从右到左找一个升序15，记录x=1</li><li>在1右侧找到最后一个比1大的数字，也就是y=3</li><li>交换1和3，21543-&gt;23541</li><li>反转541，获得23145</li></ol><blockquote><p>自此23145就是21543的下一个“字典序排列”</p></blockquote><h4 id="算法实现">算法实现</h4><p>这里给出我们的Java实现，其实C++的STL库里的next_permutation()函数也是类似的思路。这里是完整的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetPermutation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] nums = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; nums.length &amp;&amp; b &lt; nums.length) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = nums[a];</span><br><span class="line">            nums[a] = nums[b];</span><br><span class="line">            nums[b] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// nums[from] &lt;-&gt; nums[to]</span></span><br><span class="line">    <span class="comment">// to &lt; len</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reserve</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (offset &lt; (to - from + <span class="number">1</span>) / <span class="number">2</span>) &#123;</span><br><span class="line">            swap(from + offset, to - offset);</span><br><span class="line">            offset++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// boolean -&gt; 是否找到了新的排列</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getNextPermutation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 找到第一个升序</span></span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> i = len - <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="comment">// 小于零说明已经找到全部排列</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 在右侧的降序中找最接近i的那个大数</span></span><br><span class="line">        <span class="keyword">int</span> j = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[i] &gt;= nums[j]) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 交换升序数和最小大数</span></span><br><span class="line">        swap(i, j);</span><br><span class="line">        <span class="comment">// 4.反转尾部字符串</span></span><br><span class="line">        reserve(i + <span class="number">1</span>, len - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"the "</span> + ++count + <span class="string">"th permutation: "</span> + Arrays.toString(nums));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count2 = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">while</span> (getNextPermutation() &amp;&amp; count2-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"the "</span> + ++count + <span class="string">"th permutation: "</span> + Arrays.toString(nums));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>复杂度为O(n!)，和使用递归法求全排列是一样的</p></blockquote><h4 id="总结">总结</h4><p>好好体会其中的序列的理论</p><h4 id="参考">参考</h4><p><a href="https://www.ptpress.com.cn/shopping/buy?bookId=d7ee2bb8-dcb8-4029-8156-0b65d962f18a" target="_blank" rel="noopener">编程之法 面试和算法心得</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;“下一个全排列”问题&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;全排列问题和字典序算法的融合问题&lt;br&gt;
帮助理解序理论的重要材料&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法题解" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排列组合" scheme="http://yoursite.com/tags/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>八皇后问题</title>
    <link href="http://yoursite.com/2020/07/15/algorithm/classical/classical-algorithm-n-queens/"/>
    <id>http://yoursite.com/2020/07/15/algorithm/classical/classical-algorithm-n-queens/</id>
    <published>2020-07-15T11:23:08.000Z</published>
    <updated>2021-07-22T01:19:58.360Z</updated>
    
    <content type="html"><![CDATA[<h1>经典递归回溯算法-八皇后问题及其推广的n皇后问题</h1><blockquote><p>一个比计算机历史都老的问题<br>递归回溯算法的经典应用场景<br>关于无模型的可计算问题</p></blockquote><a id="more"></a><h4 id="问题描述">问题描述</h4><p>首先给没下过国际象棋的同学们科普一点背景知识，在国际象棋中，棋盘是8*8的，一共64个格子，皇后是其中最强的棋子，走法类似中国象棋中的车（可以前往横向和纵向的任何一个未被阻挡的位置），但是国际象棋中的皇后，除了横向和纵向外，还可以移动斜方向，如下图（绿色为皇后可以前往的位置，有时在术语中称“占领区”或者“看守线”）：<br><img src="/images/algorithm/queens/how_to_drive_a_queen.png" title="how_to_drive_a_queen" alt="how_to_drive_a_queen" style="max-width:60%;margin:auto;" /></p><p>回到我们的八皇后问题的定义来：</p><ol><li>在一个8*8的棋盘上放置8个皇后</li><li>找到一种放法，可以使这8个皇后无法互相攻击，和平共处</li></ol><p>这个问题最早是由一个19世纪的棋手提出来的，后来由原本的“八皇后问题”推广到了“n皇后问题”，也就是变化数字8，在一个n*n的棋盘上放置n个互相不攻击的皇后。一个基本的八皇后的解法，其中8个皇后，无论横纵还是斜向，都<strong>无法互相攻击</strong>：<br><img src="/images/algorithm/queens/one_solution_for_8_queens.png" title="one_solution_for_8_queens" alt="one_solution_for_8_queens" style="max-width:60%;margin:auto;" /></p><h4 id="关于可计算性和这个问题的一点点数学背景">关于可计算性和这个问题的一点点数学背景</h4><p>类似七桥问题，历史上很多数学家都研究过这个八皇后问题，包括高斯（数学王子，数论大师）和康托（朴素集合论创始人，历史上真正的数学天才之一）等一众大佬都研究过这个问题，但是一直没有找到特别好的方式去找到八皇后问题中的数学模型，目前已知的方法只能通过极其复杂的行列式去进行推导，研究结果也大多是某些特定的放置图形，或者当n为某个数时有多少种放置法</p><blockquote><p>关于编程问题的数学模型，如果你去计算一个{1…n}的等差数列的和，可以用while循环去一个个加起来，但是这个问题本身是有一个公式的，也就是(1+n)*n*0.5，所以等差数列的求和问题是一个有内在数学模型的问题，但是八皇后问题没有内在数学模型，只能通过计算机的特殊性质去求解，比如大规模迭代或者递归，这都是人不擅长，但是机器尤其擅长的问题，对于一个问题是否可以通过计算机的递归函数模型来计算的问题称为可计算问题，是离散数学的重要课题之一</p></blockquote><p>n皇后问题中，关于n的取值和相关解的数目的表格：</p><table><thead><tr><th>n</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>…</th></tr></thead><tbody><tr><td>U</td><td>1</td><td>0</td><td>0</td><td>1</td><td>2</td><td>1</td><td>6</td><td>12</td><td>46</td><td>92</td><td>341</td><td>1787</td><td>9233</td><td>45752</td><td>…</td></tr><tr><td>D</td><td>1</td><td>0</td><td>0</td><td>2</td><td>10</td><td>4</td><td>40</td><td>92</td><td>352</td><td>724</td><td>2680</td><td>14200</td><td>73712</td><td>365596</td><td>…</td></tr></tbody></table><blockquote><p>n代表在n*n的棋盘上放置n个皇后，U为独立解，D为互不相同解（某些解通过旋转棋盘会重叠，去掉可通过旋转和对称来重叠的解成为独立解）。现在还没有已知公式可以对n计算n皇后问题的解的个数<br>可以看到我们的八皇后问题，本身拥有92个解，其中有12个独立解<br>只有n&gt;=4时n皇后问题才成立</p></blockquote><h4 id="问题分析">问题分析</h4><p>想到这个问题的第一步其实很简单，既然是棋盘，我们直接枚举所有的情况，然后为每一种情况计算冲突，如果发现有冲突，则放弃本次情况，计算下一个情况，这么做看似简单，其实实施起来还是比较困难的，在一个64格的棋盘长摆放8个棋子，其实就是一个C(64,8)的组合，结果是4426165368，也就是你的程序要至少计算44亿次才能算出最终答案，这简直就是噩梦。但是回想一下小学数学，就会发现有一个巨大的优化方案，那就是抽屉原理</p><blockquote><p>抽屉原理：在n个抽屉中随机放n+1个球，那么至少会有一个抽屉里会出现&gt;=1个球。抽屉原理说明了在有限资源的抢占中会出现平均化和“排挤”现象</p></blockquote><p>依旧观察我们之前给出的那个八皇后问题的解，会发现每个皇后都独占一个列和一个行，在不考虑斜向的情况下，会出现下面的情况，每个皇后独占一个行和一个列，对于第0行的皇后占领后，其实剩下7个棋子是在抢占一个7*7的子棋盘：<br><img src="/images/algorithm/queens/just_row_and_col.png" title="just_row_and_col" alt="just_row_and_col" style="max-width:60%;margin:auto;" /></p><p>这就很明显了啊，使用一个{1,2,3,4,5,6,7,8}的排列组合，就可以轻松解决棋子之间的行列冲突，一个P(8,8)的全排列结果是40320，可比之前的44亿小多了，我们可以枚举一个全排列，在此基础上，检查其中的斜向是否存在冲突（互相攻击），如果冲突则转向下一个情况，由此出现了我们的第一个解法，全排列枚举法：</p><h6 id="1-全排列枚举法">1. 全排列枚举法</h6><p>我们这里设置一个一维数组locations来表示棋盘，其中的每一个位置i都代表第i行，locations[i]=j表示该行的皇后在第j列，比如有locations={0,1,2,3,6,7,5,4}，则有下图的棋盘：</p><img src="/images/algorithm/queens/desc_the_locations.png" title="desc_the_locations" alt="desc_the_locations" style="max-width:60%;margin:auto;" /><p>nextPermutation()是一个全排列函数，将我们的locations数组排列成下一个全排列序列，我这里使用的是字典序算法构造的全排列，在本题中无需深究（可以看我另一篇讲<a href="https://bladexue.github.io/2020/07/15/algorithm/algorithm-exercise-next-permutation/" target="_blank" rel="noopener">字典序全排列</a>的博客），无论是递归法构造全排列还是字典法构造全排列，都是一样的，在本体中只要知道，每成功调用一次nextPermutation()函数，函数会从{1,2,3,4,5,6,7,8}-&gt;{1,2,3,4,5,6,8,7}或者{0,1,2,3,6,7,5,4}-&gt;{0,1,2,3,7,4,5,6}，也就是转换成它的下一个全排列序列，{0,1,2,3,6,7,5,4}-&gt;{0,1,2,3,7,4,5,6}的示例图如下：</p><img src="/images/algorithm/queens/locations_with_permutation.png" title="locations_with_permutation" alt="locations_with_permutation" style="max-width:90%;margin:auto;" /><p>hasConflict(current_row)则是冲突判断函数，由于本题用来全排列，横纵方向是绝对不会冲突的（每行只有一个皇后，且每个皇后都在0-7号不同的列上），只需计算行数差是否等于列数差即可，也就是|a-b|==|locations[a]-locations[b]|?，若相等，则说明在同一条斜线上，会发生互相攻击，下面就是一种会发生攻击的例子：</p><img src="/images/algorithm/queens/locations_with_confict.png" title="locations_with_confict" alt="locations_with_confict" style="max-width:70%;margin:auto;" /><p>将P(8,8)=40320次枚举全部完成，就可以算出其中有多少次成立了，且这个解法可以从八皇后推广到n皇后，完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainWithPermutation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] locations;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化计数器，记录有多少种解法</span></span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 初始化棋盘规模，这里八皇后，所以是8</span></span><br><span class="line">        n = <span class="number">8</span>;</span><br><span class="line">        <span class="comment">// 初始化棋盘        </span></span><br><span class="line">        locations = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            locations[i] = i;   <span class="comment">// locations=&#123;0,1,2,3,4,5,6,7&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将目前待定位置（某个行数字）和其它确定（之前的，不包括之后的）位置比较，看是否合法</span></span><br><span class="line">    <span class="comment">// 无冲突即为false</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasConflict</span><span class="params">(<span class="keyword">int</span> current_row)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> previous_row = <span class="number">0</span>; previous_row &lt; current_row; previous_row++) &#123;</span><br><span class="line">            <span class="comment">// 是否压线（存在互相攻击），压线则true</span></span><br><span class="line">            <span class="keyword">if</span> ((Math.abs(current_row - previous_row) == Math.abs(locations[current_row] - locations[previous_row]))<span class="comment">/* || (locations[current_row] == locations[previous_row]) */</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全排列函数的交换子函数，交换数列的某两位</span></span><br><span class="line">    <span class="comment">// &#123;1,2,3,4&#125;.swap(0,3) -&gt; &#123;4,2,3,1&#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; locations.length &amp;&amp; b &lt; locations.length) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = locations[a];</span><br><span class="line">            locations[a] = locations[b];</span><br><span class="line">            locations[b] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 全排列函数的反转子函数，会将某一长度的尾部反转</span></span><br><span class="line">    <span class="comment">// &#123;1,2,3,4&#125;.reserve(1,3) -&gt; &#123;1,4,3,2&#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reserve</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (offset &lt; (to - from + <span class="number">1</span>) / <span class="number">2</span>) &#123;</span><br><span class="line">            swap(from + offset, to - offset);</span><br><span class="line">            offset++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 全排列函数的主体，会将数列locations排列成下一个排列序</span></span><br><span class="line">    <span class="comment">// boolean -&gt; 是否找到了新的排列，若无下一个全排列了则false</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">nextPermutation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 找到第一个升序</span></span><br><span class="line">        <span class="keyword">int</span> len = locations.length;</span><br><span class="line">        <span class="keyword">int</span> i = len - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; locations[i] &gt;= locations[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="comment">// 小于零说明已经找到全部排列</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 在右侧的降序中找最接近i的那个大数</span></span><br><span class="line">        <span class="keyword">int</span> j = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; locations[i] &gt;= locations[j]) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 交换升序数和最小大数</span></span><br><span class="line">        swap(i, j);</span><br><span class="line">        <span class="comment">// 4.反转尾部字符串</span></span><br><span class="line">        reserve(i + <span class="number">1</span>, len - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印函数，将棋盘输出在控制台上</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printQueen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"the "</span> + count + <span class="string">"th map for queens: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; locations.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; locations.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == locations[i]) &#123;</span><br><span class="line">                    System.out.print(<span class="string">"Q, "</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.print(<span class="string">"., "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> row;</span><br><span class="line">            <span class="keyword">for</span> (row = <span class="number">0</span>; row &lt; locations.length; row++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hasConflict(row))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (row &gt;= n) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                printQueen();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (nextPermutation());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>字典序全排列的复杂度是O(n!)，整体的复杂度可以自己算一下复杂度（作者偷懒）</p></blockquote><h6 id="2-递归回溯法">2. 递归回溯法</h6><p>这个是八皇后问题的最经典的解法，要知道八皇后问题在计算机领域为人所知就是因为巨佬Dijkstra在1972年的结构化编程的论文里，以八皇后问题为例，讲解了他所研究的深度优先搜索回溯算法（图论中计算最短路径的Dijkstra算法就是以他的名字命名的）</p><p>所谓的回溯法想必在大学里学数据结构时都接触过，简单来说就是维护一个记录型结构，并把问题的求解划分成n个子问题，第k层问题的解决依赖于第k+1层问题，且第k层会为第k+1层提供必要数据，当k+1层出错时，程序会回到第k层，k层调整部分参数后，调用新的第k+1层，在不断的调用和回溯过程中，最终达到解决问题所需要的条件（可用解）。说白了回溯法就是走迷宫：<strong>从一条路往前走，能进则进，不能进则退回来，换一条路再试</strong></p><p>这里给出在4*4棋盘中进行的4皇后问题，各位可以跟着箭头走一边，从而感受一下回溯过程是怎么发生的，尤其是其中的“<strong>层层深入</strong>”和<strong>回溯现象</strong>：</p><img src="/images/algorithm/queens/4_queens_backtrack.png" title="4_queens_backtrack" alt="4_queens_backtrack" style="max-width:90%;margin:auto;" /><p>众所周知啊，递归的问题要么死活看不懂，一旦看懂就会特别简单，所以多说无益，还是直接看代码吧，在看实际代码前，做几点解释：</p><ol><li>在全排列方案中，使用的一维数组locations作为棋盘，这里则是用了一个二维数组，本质是没有区别的，只是在递归过程中，二维的棋盘方便理解而已，观众老爷们可以自己修改代码，把二维棋盘换成一维棋盘</li><li>由于棋盘换了，所以重新编写了冲突检测函数，会分别检测当前棋子的北侧，系北侧和东北侧（也就是纵向正上方，斜向左上方和斜向右上方）</li><li>阅读使用了递归算法的代码，一定要找到“我差遣我自己”的代码，也就是出现在函数体内的函数头，并重点关心其中的数据变化，这样可以很快理解一个递归算法</li></ol><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainWithBacktrack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> n;   <span class="comment">// 在n*n的棋盘上部署n个皇后</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span>[][] board;  <span class="comment">// 双重数组，棋盘</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化计数器</span></span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 初始化n，表示n个皇后在n*n的棋盘上，这里是八皇后，所以n=8</span></span><br><span class="line">        n = <span class="number">8</span>;</span><br><span class="line">        <span class="comment">// 初始化棋盘，注意这里是二维棋盘，初值是'.'，表示没有棋子</span></span><br><span class="line">        board = <span class="keyword">new</span> <span class="keyword">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board.length; j++) &#123;</span><br><span class="line">                board[i][j] = <span class="string">'.'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是一个递归函数</span></span><br><span class="line">    <span class="comment">// backtrack(n)表示放置第n行的皇后，每一行的下棋都是一个k子问题</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 放置第8行了，说明之前的0-7号都不冲突了，解成立了</span></span><br><span class="line">        <span class="comment">// 计数后输出</span></span><br><span class="line">        <span class="comment">// 这里其实就是递归出口</span></span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            printQueen();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; board.length; col++) &#123;</span><br><span class="line">            <span class="comment">// 如果当前合法，则将本格值设为'Q'，继续递归下一行的皇后</span></span><br><span class="line">            <span class="keyword">if</span> (isValid(row, col)) &#123;</span><br><span class="line">                board[row][col] = <span class="string">'Q'</span>;</span><br><span class="line">                backtrack(row + <span class="number">1</span>); <span class="comment">// by rows</span></span><br><span class="line">                board[row][col] = <span class="string">'.'</span>;  <span class="comment">// 这里是回溯清零，本次递归完成后，已经置'Q'的位置要还原，不能影响下一次递归</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 工具函数，打印当前棋盘</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printQueen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"the "</span> + count + <span class="string">"th map for queens: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board.length; j++) &#123;</span><br><span class="line">                System.out.print(board[i][j] + <span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合法判定</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// north</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">1</span>; offset &lt;= row; offset++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row - offset][col] == <span class="string">'Q'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// north-west</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">1</span>; offset &lt;= row &amp;&amp; offset &lt;= col; offset++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row - offset][col - offset] == <span class="string">'Q'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// north-east</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">1</span>; offset &lt;= row &amp;&amp; offset &lt; board.length - col; offset++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row - offset][col + offset] == <span class="string">'Q'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        backtrack(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// 作者偷懒了，还是自己算一下复杂度吧</p><h4 id="运行测试">运行测试</h4><p>之前给出来n皇后的结果表，上面的代码我都自己跑过了，结果都是符合的，你们可以自己跑一下</p><h4 id="总结">总结</h4><p>八皇后问题是一个非常经典的递归回溯法的应用，应该自己写一下，好好掌握。在本质上，这是一个树形深度递归的问题，感兴趣的旁友可以自己继续深入，而不是仅仅看到表明问题的八皇后</p><p>如果发现文中错误，请在评论区留言或者直接邮件我，冒个泡也行</p><h4 id="参考">参考</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">wiki-八皇后问题</a><br><a href="https://juejin.im/post/5accdb236fb9a028bb195562" target="_blank" rel="noopener">什么是八皇后问题？</a><br><a href="https://www.jianshu.com/p/bb123944d3e5" target="_blank" rel="noopener">回溯法(backtracking algorithm)求解N皇后问题(N-Queens puzzle)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;经典递归回溯算法-八皇后问题及其推广的n皇后问题&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;一个比计算机历史都老的问题&lt;br&gt;
递归回溯算法的经典应用场景&lt;br&gt;
关于无模型的可计算问题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="经典算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="回溯问题" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%BA%AF%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Java的Context上下文</title>
    <link href="http://yoursite.com/2020/07/04/java/others/context-concept-in-java/"/>
    <id>http://yoursite.com/2020/07/04/java/others/context-concept-in-java/</id>
    <published>2020-07-04T14:52:20.000Z</published>
    <updated>2021-07-22T01:19:58.370Z</updated>
    
    <content type="html"><![CDATA[<h1>对Java中的Context上下文概念的理解</h1><a id="more"></a><p>Java中Context是一个很常见的概念，在各大IOC容器和框架中经常可以看到，我第一次看到这个东西是servlet里的ServletContext对象，Context单词的本意是“语境”或者“上下文”，大部分技术博客也都直接拿上下文来称呼，但是从直观上让人感觉乖乖的，让人一时有点理解不能，这里针对Context的本质做一点讨论</p><h4 id="Java中的几个Context例子">Java中的几个Context例子</h4><p>这里给出几个常见的Context，来感受一下这个上下文到底是个什么东西：</p><h6 id="1-JNDI的InitialContext类和Context接口">1. JNDI的InitialContext类和Context接口</h6><p>JNDI（Java Naming and Directory Interface），也就是Java命名和目录接口中的一个核心类javax.naming.InitialContext，它实现了一个javax.naming.Context接口，InitialContext类会读取JNDI的一些配置信息，并内含对象和其在JNDI中的注册名称的映射信息。这里给出javax.naming.Context接口的一段文档：</p><blockquote><p>This interface represents a naming context, which consists of a set of name-to-object bindings. It contains methods for examining and updating these bindings.<br>大致意思：这个接口代表了一个命名上下文，其包含了一系列的“名称到对象”映射的集合，同时携带了检查和更新这些绑定的相关方法</p></blockquote><p>这里看一段JBOSS中获取MBean的远程调用类的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过InitialContext中JNDI注册的名称“jmx/invoker/RMIAdaptor”来获得RMIAdaptor对象</span></span><br><span class="line">InitialContext ic=<span class="keyword">new</span> InitialContext();</span><br><span class="line">RMIAdaptor server=(RMIAdaptor)ic.lookup(<span class="string">"jmx/invoker/RMIAdaptor"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这里的行为类似一个Hash表，存储String-&gt;Object的映射关系</p></blockquote><h6 id="2-Spring的ApplicationContext接口">2. Spring的ApplicationContext接口</h6><p>ApplicationContext接口是Spring框架的核心接口之一，其代表的context也是Spring的核心概念之一，直接来看一段代码来体会一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ioc/Beans.xml"</span>);</span><br><span class="line">HelloWorld helloWorld = (HelloWorld) context.getBean(<span class="string">"helloWorld"</span>);</span><br><span class="line">helloWorld.sayHello();</span><br></pre></td></tr></table></figure><blockquote><p>在本例中，ApplocationContext代表一个抽象概念，表示从xml中注册的元数据中加载出的一个“语境”，也就是标注了相互关系的元数集合</p></blockquote><p>这段代码从配置文件Beans.xml中读取了各个Bean对象的元数据，返回了一个包含了所有注册Bean的context对象，我们可以从context中获取某个xml中注册的Bean对象，在这里，可以很清晰体会到，context的大致含义就是一个对象容器，或是一个运行环境</p><h6 id="3-J2EE的ServletContext接口">3. J2EE的ServletContext接口</h6><p>ServletContext是J2EE四大域之一，一个Web容器（比如Tomcat）可以运行多个Web应用（部署层面讲对应多个war包），Web容器在启动时，会为每个Web应用程序创建一个对应的ServletContext对象，代表当前Web应用，被所有访问者（客户端）共享</p><p>ServletContext对象会被其所属的Web应用（每个Web应用仅有一个ServletContext对象）中的所有Servlet共享，因此Servlet对象之间可以通过ServletContext对象来实现通讯，自此ServletContext对象通常也被称之为context域对象，具体关系可以看下图：</p><img src="/images/java/context/servlet-context.png" title="servlet-context" alt="servlet-context" style="max-width:70%;margin:auto;" /><p>基本的使用代码，在ServletContext对象中写入一个共享数据（本应用的其它Servlet都可以访问）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ServletContext servletContext = getServletConfig().getServletContext();</span><br><span class="line">servletContext.setAttribute(<span class="string">"boy who lived"</span>, <span class="string">"harry potter"</span>);</span><br></pre></td></tr></table></figure><h4 id="对Context的理解">对Context的理解</h4><p>关于context这个词，本意是”上下文“，”语境“和”前后关系“，在语言学中本来的作用是对抗歧义，防止”断章取义“，本质上是一组特定发生的对象及其之间相互关系的集合，如”在人造工具的帮助下，人类是这颗星球上最快的动物“，如果忽略上下文就容易造成断章取义的”人类是这颗星球上最快的动物“，表意上就没那么清晰了，在这种情况下，”上下文“的意思就是”语言的具体环境“</p><p>在ServletContext和如ApplicationContext的例子中，其名下的各个实例对象，是可以通过context来进行相互通信的，在这个情况下，context成为了某种承载了公用信息的公告板，是发生相互作用关系的媒介，这和context本意的”前后关系“是一致的。再比如访问JNDI的Context，他的上层是JNDI服务器（可能是远程的），下层是你的应用程序，他的作用也是建立一个通道让你能访问JNDI服务器，同时也让JNDI服务器接受你的请求，同样起到交互作用</p><p>从字面意义上看context翻译上下文其实没有任何问题，就是理解起来不太方便而已，在大多数场合下，如ApplicationContext，直接理解成一个”承上启下“的运行时环境或者对象容器即可，多数情况下一个Context实例也就是一个特殊关系集合，只管作为container使用即可</p><h4 id="总结">总结</h4><p>翻译的多样性是持续存在的，比如container这个词，可以作数据结构中的数据容器，docker的虚拟机容器，也可以是单纯的一堆对象的管理器，说到底只是个取名，只是一个抽象概念，应该关注其具体代表的职能，而不是纠结字眼，就比如”吐槽“这个词，论坛里都在用，要你说出具体意思估计回答千奇百怪的。如果一定要我取一个翻译，我会把把context翻译成”语境/前后关系容器/交互运行环境“。以上</p><h4 id="参考">参考</h4><p><a href="https://www.cnblogs.com/baoendemao/p/3804756.html" target="_blank" rel="noopener">java上下文Context类</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;对Java中的Context上下文概念的理解&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>经典算法题解-两个子串</title>
    <link href="http://yoursite.com/2020/06/10/algorithm/exercise/question-two-substrings/"/>
    <id>http://yoursite.com/2020/06/10/algorithm/exercise/question-two-substrings/</id>
    <published>2020-06-10T07:58:16.000Z</published>
    <updated>2021-07-22T01:19:58.367Z</updated>
    
    <content type="html"><![CDATA[<h1>经典算法题解-两个子串</h1><p>施工ing</p><blockquote><p>这个是2018年京东校招的笔试题<br>本质是KMP算法子问题的“最大相同前后缀”的变种（也就是next[]数组的构造问题），我的另一篇博客<a href="https://bladexue.github.io/2020/06/04/algorithm/classical-algorithm-maximum-same-prefix-suffix/" target="_blank" rel="noopener">最大相同前缀后缀问题</a>有讨论，看本文前请先花20分钟看一下</p></blockquote><h4 id="问题描述">问题描述</h4><h4 id="问题分析">问题分析</h4><p>如果有好好读完我那篇关于前后缀的文章，那么这个题目的解答</p><h4 id="示例代码">示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] getNext(String pat) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = pat.length();</span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (pat.charAt(i) != pat.charAt(j) &amp;&amp; i &gt; <span class="number">0</span>)</span><br><span class="line">                i = next[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pat.charAt(i) == pat.charAt(j))</span><br><span class="line">                next[j] = ++i; </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                next[j] = <span class="number">0</span>;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPrefix</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> s.substring(<span class="number">0</span>, getNext(s)[len - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;经典算法题解-两个子串&lt;/h1&gt;
&lt;p&gt;施工ing&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个是2018年京东校招的笔试题&lt;br&gt;
本质是KMP算法子问题的“最大相同前后缀”的变种（也就是next[]数组的构造问题），我的另一篇博客&lt;a href=&quot;https://bl
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法题解" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="习题" scheme="http://yoursite.com/tags/%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>经典算法题解-最长快乐前缀</title>
    <link href="http://yoursite.com/2020/06/10/algorithm/exercise/question-longest-happy-prefix/"/>
    <id>http://yoursite.com/2020/06/10/algorithm/exercise/question-longest-happy-prefix/</id>
    <published>2020-06-10T07:48:16.000Z</published>
    <updated>2021-07-22T01:19:58.365Z</updated>
    
    <content type="html"><![CDATA[<h1>最长快乐前缀问题</h1><blockquote><p>题目描述来源：<a href="https://leetcode-cn.com/problems/longest-happy-prefix/" target="_blank" rel="noopener">LeetCode-最长快乐前缀</a><br>题目难度：困难<br>本题是KMP算法的应用变种，阅读本文前最好阅读一下我的另一篇博客<a href="https://bladexue.github.io/2020/06/04/algorithm/classical-algorithm-maximum-same-prefix-suffix/" target="_blank" rel="noopener">最大相同前缀后缀问题</a>中对于最大相同前缀后缀问题的讨论</p></blockquote><a id="more"></a><h4 id="问题描述">问题描述</h4><p>定义：快乐前缀，是在原字符串中既是<strong>非空</strong>前缀也是后缀（不包括原字符串自身）的字符串</p><p>问题要求：</p><ol><li>给你一个字符串s，请你返回它的<strong>最长快乐前缀</strong></li><li>如果不存在满足题意的前缀，则返回一个空字符串</li></ol><p>示例：</p><ol><li>给出<code>S = &quot;ababab&quot;</code>，输出<code>&quot;abab&quot;</code></li><li>给出<code>S = &quot;leetcodeleet&quot;</code>，输出<code>&quot;leet&quot;</code></li><li>给出<code>S = &quot;a&quot;</code>，输出<code>&quot;&quot;</code></li></ol><h4 id="问题分析">问题分析</h4><p>如果你有好好看完我开头提到的那篇讲前后缀的文章，那么这个题目的解答显而易见了，其实就是KMP算法中next[]数组的定义，通过遍历字符串，递推构造就行，代码甚至可以直接从<a href="https://bladexue.github.io/2020/06/04/algorithm/classical-algorithm-maximum-same-prefix-suffix/" target="_blank" rel="noopener">最大相同前缀后缀问题</a>里抄过来，只要针对长度为0和1的输入进行一点点调整即可。不多废话，直接看代码</p><h4 id="代码示例">代码示例</h4><p>这里只给出Java的示例，基本是next[]的简单修改，如果看不懂请回到我那篇讲前后缀问题的博客看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] getMax(String pat) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = pat.length();</span><br><span class="line">        <span class="keyword">int</span>[] max = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        max[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;  <span class="comment">// 表示当前最大共缀长度的候选值</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;  <span class="comment">// 从第二位开始遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (j &lt; len) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pat.charAt(i) == pat.charAt(j))</span><br><span class="line">                max[j++] = ++i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                max[j++] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                i = max[i - <span class="number">1</span>]; <span class="comment">// 递推核心</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPrefix</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> s.substring(<span class="number">0</span>, getMax(s)[len - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度O(N)，空间复杂度O(N)</p></blockquote><p>在LeetCode上的运行结果如下，可以看出整体效率还是比较高的：<br><img src="/images/algorithm/exercise/happy-prefix/result.png" title="result" alt="result" style="max-width:80%;margin:auto;" /></p><h4 id="总结">总结</h4><p>这一类的问题很常见，基本就是某一个经典算法的子问题，比如本题就是KMP算法的子问题，也就是求next[]数组的问题，如果你发现代码有改进之处，或者发现了bug，记得在评论区bb我，感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;最长快乐前缀问题&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;题目描述来源：&lt;a href=&quot;https://leetcode-cn.com/problems/longest-happy-prefix/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-最长快乐前缀&lt;/a&gt;&lt;br&gt;
题目难度：困难&lt;br&gt;
本题是KMP算法的应用变种，阅读本文前最好阅读一下我的另一篇博客&lt;a href=&quot;https://bladexue.github.io/2020/06/04/algorithm/classical-algorithm-maximum-same-prefix-suffix/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;最大相同前缀后缀问题&lt;/a&gt;中对于最大相同前缀后缀问题的讨论&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法题解" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="习题" scheme="http://yoursite.com/tags/%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>模式匹配的KMP算法</title>
    <link href="http://yoursite.com/2020/06/05/algorithm/classical/classical-algorithm-kmp/"/>
    <id>http://yoursite.com/2020/06/05/algorithm/classical/classical-algorithm-kmp/</id>
    <published>2020-06-05T05:43:57.000Z</published>
    <updated>2021-07-22T01:19:58.359Z</updated>
    
    <content type="html"><![CDATA[<h1>字符串模式匹配中的KMP算法</h1><h4 id="施工ing">施工ing</h4><blockquote><p>施工中…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;字符串模式匹配中的KMP算法&lt;/h1&gt;
&lt;h4 id=&quot;施工ing&quot;&gt;施工ing&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;施工中…&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="经典算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>最大相同前缀后缀问题</title>
    <link href="http://yoursite.com/2020/06/04/algorithm/classical/classical-algorithm-maximum-same-prefix-suffix/"/>
    <id>http://yoursite.com/2020/06/04/algorithm/classical/classical-algorithm-maximum-same-prefix-suffix/</id>
    <published>2020-06-04T07:14:17.000Z</published>
    <updated>2021-07-22T01:19:58.360Z</updated>
    
    <content type="html"><![CDATA[<h1>经典字符串算法-最大相同前缀后缀问题</h1><blockquote><p>这个是学习KMP算法的前置问题，已经有几十年历史了<br>本质是个很经典的有限状态机<br>我看过很多关于这个问题的博客，要么是特别长根本看不懂，要么根本就是错的，所以我决定自己写一篇，中间解释部分有点长，喜欢直接看源码可以直接翻到源码那个节，算法比较难理解，但是实现代码就一点点，很短很巧妙</p></blockquote><a id="more"></a><h4 id="问题描述">问题描述</h4><p>首先了解一个概念，有一个字符串ABCDE，其中从首字母A开始的子字符串，如AB或ABC，称为这个字符串的前缀，同样的以尾字母结束的子字符串，如CDE或DE，称后缀。其中，子字符串的长度len必须有0&lt;len&lt;整体长度，也就是说子字符串必须是个真子集，A是ABCDE的前缀，ABCD是ABCDE的前缀，但ABCDE不能作为其本身的子字符串</p><p>在了解完前后缀概念后，我们的问题来了：给定一个字符串S，找出其相同前缀后缀的最大长度</p><p>示例：有字符串ABCAB，其最大的相同前缀和后缀是AB，所以这个字符串的最大相同前缀后缀长度为2<br><img src="/images/algorithm/kmp/ABCAB的共坠.png" title="ABCAB的共坠" alt="ABCAB的共坠" style="max-width:60%;margin:auto;" /><br>同时在此给出几个名词（我自己创的或者习惯称呼，为的是表达方便），一共三处：</p><ol><li>对于一个字符串ABCAB，如果其拥有相同的前缀后缀存在，那么称这个字符串为<strong>共生串</strong>，这其中拥有对应相同的后缀的前缀称<strong>共生前缀</strong>，对应的后缀称<strong>共生后缀</strong>，统称<strong>共生缀</strong>，简称共缀，上图中的ABCAB就是一个共生串，其中的AB则是这个共生串的最大共生缀，也是唯一共生缀</li><li>对于一个字符串ABCD，它会拥有几个子串，也就是A，AB和ABC，它们连同ABCD呈现出一种成长性（如下图），在这里我们称A为AB的前驱字符串，AB为ABC的前驱字符串（注意前趋串本身也是一个前缀串）<br><img src="/images/algorithm/kmp/字符串的成长性.png" title="字符串的成长性" alt="字符串的成长性" style="max-width:70%;margin:auto;" /></li><li>我们都知道字符串本质是一个字符数组，那么对于字符串<code>S = &quot;ABCD&quot;</code>其实等同于<code>S = {'A','B','C','D'}</code>，所以S[0]==‘A’，同时有一种切片描述，S[0..2]表示S[0]到S[2]之间的所有字符组成的串，也就是说S[0..2]==“AB”</li></ol><h4 id="共生缀的对称性">共生缀的对称性</h4><p>观察这样一个共生串ABACABA，它有两个共生缀A和ABA，在这里可以看出，当一个共生串拥有一个以上的共生缀的时候，其内部就会展现出一种对称性，在此不必要深究其数学证明，只要在视觉上对其有一个概念即可</p><p>下面是ABACABA的示意图，其中的4个被涂红的A，展现出了很明显的对称性。之后我们会看到，这几个A在<strong>实际意义</strong>上，指代的是同一个字符：<br><img src="/images/algorithm/kmp/ABACABA的4个A.png" title="ABACABA的4个A" alt="ABACABA的4个A" style="max-width:60%;margin:auto;" /></p><h4 id="问题分析">问题分析</h4><p>一开始看见这个问题，想到的方法自然是万能的暴力for循环啦，不多bb，还是拿ABACABA这个字符串开刀：</p><h6 id="1-暴力for循环">1. 暴力for循环</h6><p>基本流程如下：</p><ol><li>考虑共缀长度为1，那我们直接比较首尾字符就行了，也就是S[0]和S[6]，我们发现都是A，所以有共缀成立，为A，长度为1，如下所示：<br><img src="/images/algorithm/kmp/for1.png" title="for1" alt="for1" style="max-width:60%;margin:auto;" /></li><li>考虑是否有更长的共缀长度，于是我们将考量长度+1，开始考虑S[0..2]和S[5..7]，发现并不匹配，所以不存在长度为2的共缀，如下所示（黄色表示失败）：<br><img src="/images/algorithm/kmp/for2.png" title="for2" alt="for2" style="max-width:60%;margin:auto;" /></li><li>我们不甘心，只能继续查找更长的字符串，看是否有奇迹发生，于是在长度为3的共缀串中，发现匹配了，如下图所示：<br><img src="/images/algorithm/kmp/for3.png" title="for3" alt="for3" style="max-width:60%;margin:auto;" /></li><li>接下来继续尝试4和5和6，但是均为失败，所以最大共缀就是之前测到的ABA，长度为3，下面是完整的一览（3以后我涂色分层了，为了直观一点，黄色失败，红色成功）：<br><img src="/images/algorithm/kmp/for5.png" title="for5" alt="for5" style="max-width:80%;margin:auto;" /></li></ol><p>示例代码如下，我用Java实现的，随便看看就行了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxPrefix</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String s = <span class="string">"abacaba"</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt; len; m++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = len - m; i &lt; m &amp;&amp; j &lt; len; i++, j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) != s.charAt(j)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == m - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果存在共缀则输出共缀长度</span></span><br><span class="line">                    System.out.println(m);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最终输出</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度O(N^2)，效率不是很高，毕竟是暴力双重for循环</p></blockquote><h6 id="2-递推数组">2. 递推数组</h6><p>上面的例子只是为了方便理解，其实由于效率低等原因，我们一般更愿意采用本节的方案，使用递归关系求解，这个算法很有趣，而且是KMP算法的核心。对比上面的只能算一个字符串，递推数组的方案不仅能求出我们的字符串本体的共缀，甚至能连同求出其子串的共缀</p><p>这里我们使用字符串ABACABAB作为示例，我们在这里建立一个max[]数组，数组元素代表当前长度下，字符串最长共缀，你们可以看下图感受一下：<br><img src="/images/algorithm/kmp/next1.png" title="next1" alt="next1" style="max-width:60%;margin:auto;" /></p><p>在正式开始构建之前，观察这么一个有趣的现象，还是看我们上面的ABACABAB，但是我稍微涂了一点颜色，如下所示：<br><img src="/images/algorithm/kmp/next2.png" title="next2" alt="next2" style="max-width:60%;margin:auto;" /><br>观察上图，我们可以发现，对于字符串ABACABAB，它是一个共生串，且共生缀长度为2（也就是满足大于1），那其实很清晰可以看到，它的前驱串ABACABA也是一个共生串且共生缀长为1，于是我们可以得到一个有趣的结论，也就是<strong>共生缀长度超过1的共生串的前驱串也必然是一个共生串</strong>，我称之为“有爸爸的前提是先有爷爷定律”，这个结论是递推数组的核心，也就是说，我们在max[k]的数据受到max[k-1]的影响，在考虑在某个位置（本例中为S[7]=B）是否构成共缀的时候只要考虑其之前的字符串（前缀或前趋）是否是个共生串（本例中为S[0..7]=“ABACABA”，其为共生串且共缀为ABA，ABA本身也是一个共生串，共缀为A）即可，然后我们只要校验尾位即可，不需要像暴力for里跟二胡卵子一样每一位都单独计算了。借由这个性质，我们使用递推法构造数组成为可能</p><p>基于以上事实，那其实我们构建递推数组max[]的核心流程也已经很明确了，示例依旧是待检字符串<code>S = &quot;ABACABAB&quot;&quot;</code>，有以下步骤：</p><ol><li>如果位置S[k]的前趋串S[0..k]是一个共生串，且共缀长度为j（也就是max[k-1]=j），那么直接比较S[j]和S[k]，若匹配，则j+1就是max[k]的值，如示例字符串ABACABAB的S[6]位置，按照我们的“<strong>有爸爸的前提是先有爷爷定律</strong>”，其前趋串ABACAB拥有共缀AB，且S[j]=S[2]=A和S[k]=S[6]=A匹配，所以max[6]顺理成章喜加一，有max[6]=max[5]+1=2+1=3，如下图所示：<br><img src="/images/algorithm/kmp/next3.png" title="next3" alt="next3" style="max-width:65%;margin:auto;" /></li><li>如果不匹配，说明max[k]&lt;=max[k-1]=j，如示例字符串ABACABAB的S[7]位置，有S[3]=C!=S[7]=B，按照<strong>有爸爸的前提是先有爷爷定律</strong>，我们继续考虑前趋串来找这个“爷爷”，幸运的是ABAC尽管和ABAB不匹配，但是ABA本身也是一个共生串，其共缀为A，在第二次迭代后，S[0..2]=AB和S[6..8]=AB匹配，所以max[7]=max[2]+1=1+1=2，如下图所示：<br><img src="/images/algorithm/kmp/next4.png" title="next4" alt="next4" style="max-width:70%;margin:auto;" /></li><li>如果运气不太好，无论怎么迭代前趋串，以及前趋串的前趋串，一直找不到这个“爷爷”，那没办法了，没“爷爷”自然没“爸爸”，那也自然没有“儿子”了，按照<strong>有爸爸的前提是先有爷爷定律</strong>，前趋串不是共生串，且本身单字符匹配也不成立，max[k]就只能置零，如S[3]位置，找不到“爷爷”，本身也不匹配（指S[0]!=S[3]），最后只能置零，也有稍微幸运一点的，如S[4]，虽然找不到“爷爷”，但是本身单字符匹配成立了（指S[0]!=S[3]=A），所以max[4]=0+1=1，如下图所示（黄色失败红色成功）：<br><img src="/images/algorithm/kmp/next5.png" title="next5" alt="next5" style="max-width:80%;margin:auto;" /></li></ol><p>bb了这么久，估计不少人看得也云里雾里的，对于理解这种含递推过程的问题来说很正常，多看几遍就有感觉了，自然而然就看懂了，这里直接给出相关的Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kmp</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其实next[]数组在KMP算法中实际应用时会有一点点小变化，但是这里是为了计算共缀，依旧采用next的命名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getNext(String pat) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = pat.length();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;;   <span class="comment">// 字符串长度0或1直接返回</span></span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;  <span class="comment">// 表示当前最大共缀长度的候选值</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;  <span class="comment">// 从第二位开始遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (j &lt; len) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pat.charAt(i) == pat.charAt(j)) &#123;</span><br><span class="line">                next[j++] = ++i;    <span class="comment">// 如果第j位直接匹配，则最大值顺延。且j进入下一位</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                next[j++] = <span class="number">0</span>;      <span class="comment">// 找不到“爷爷”，本身又不匹配，那就只能置0</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i = next[i - <span class="number">1</span>];    <span class="comment">// 递推核心，寻找下一层的最大前缀</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(getNext(<span class="string">"ABACABAB"</span>)));</span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        <span class="comment">// [0, 0, 1, 0, 1, 2, 3, 2]</span></span><br><span class="line">        <span class="comment">// 对应有txt &lt;-&gt; max[]</span></span><br><span class="line">        <span class="comment">// A B A C A B A B</span></span><br><span class="line">        <span class="comment">// 0 0 1 0 1 2 3 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完了代码，我们在针对字符串<code>S = &quot;ABACABAB&quot;&quot;</code>来就进行一次完整的计算，建议结合上面的源码一起看：</p><ol><li>S[0]=A，完整字串A，长度1,不存在前后缀和匹配问题，直接置0，最终结果max[0]=0<br><img src="/images/algorithm/kmp/full1.png" title="full1" alt="full1" style="max-width:60%;margin:auto;" /></li><li>S[1]=B，完整字串AB，本体单字符S[0]=A!=S[1]=B，且没有前趋（因为max[0]=0，不是一个合法的共生串）给它找“爷爷”，最终置0，最终结果max[1]=0<br><img src="/images/algorithm/kmp/full2.png" title="full2" alt="full2" style="max-width:60%;margin:auto;" /></li><li>S[2]=A，完整字串ABA，依旧没有前趋串给它“找爷爷”，所以直接比较本体的S[2]，本体单字符S[0]=A==S[2]=A，匹配成立，最终结果为max[2]=max[1]+1=0+1=1<br><img src="/images/algorithm/kmp/full3.png" title="full3" alt="full3" style="max-width:60%;margin:auto;" /></li><li>S[3]=C，完整字串ABAC，有前趋串ABA，按照我们顺延的做法，比较AB和AC，失败了，同时迭代ABA的共缀A无果，所以最终悲惨置0，最终结果max[3]=max[0]+0=0+0=0<br><img src="/images/algorithm/kmp/full4.png" title="full4" alt="full4" style="max-width:60%;margin:auto;" /></li><li>S[4]=A，完整字串ABACA，无前趋共生串，但本体单字符S[0]=A==S[4]=A，匹配成立，所以最终结果max[4]=max[0]+1=0+1=1<br><img src="/images/algorithm/kmp/full5.png" title="full5" alt="full5" style="max-width:60%;margin:auto;" /></li><li>S[5]=B，完整字串ABACAB，有前趋共生串ABACA且共生缀A，匹配单体S[1]=B==S[5]=B，匹配成立，结果顺延，最终结果max[5]=max[4]+1=1+1=2<br><img src="/images/algorithm/kmp/full6.png" title="full6" alt="full6" style="max-width:60%;margin:auto;" /></li><li>S[6]=A，完整字串ABACABA，有前趋共生串ABACAB且共生缀AB，匹配单体S[2]=A==S[6]=A，匹配成立，结果顺延，最终结果max[6]=max[5]+1=2+1=3<br><img src="/images/algorithm/kmp/full7.png" title="full7" alt="full7" style="max-width:60%;margin:auto;" /></li><li>S[7]=B，完整字串ABACABAB，有前趋共生串ABACABA且共生缀ABA，但是匹配单体S[3]=C!=S[7]=B失败，所以按照<strong>有爸爸的前提是先有爷爷定律/共生缀长度超过1的共生串的前驱串也必然是一个共生串定律</strong>开始“找爷爷（有效共缀）”，其前趋缀ABACABA的共生缀本身也是共缀为A的共生缀，最终S[0..2]=A+B匹配S[6..8]=A+B，最终结果max[7]=max[2]+1=1+1=2<br><img src="/images/algorithm/kmp/full8.png" title="full8" alt="full8" style="max-width:60%;margin:auto;" /></li></ol><blockquote><p>注意，在这里，我额外用绿色标出了4个A的位置，可以返回前面，看一看我说的对称性，你就知道，这个图到底什么意思了<br>同时观察S[7]=B指出的箭头，这个其实代表了算法实现中的一个目的，找到共生缀，其实就是当前位的S[k]的字符X是否在之前的共生串中出现过，所谓的“找爷爷”，其实就是在借由递推不同层级的前缀来找这个字符X</p></blockquote><p>最终得到的max[]数组为：<br><img src="/images/algorithm/kmp/full10.png" title="full9" alt="full9" style="max-width:60%;margin:auto;" /></p><h4 id="总结">总结</h4><p>到此为止，就完整地完成了字符串的最大相同前后缀问题，我们求出来的max[]数组其实是KMP算法中next[]数组的基础，可以说理解了最大相同前后缀问题就是理解了KMP算法（这个算法是出了名的难理解）。这个问题的本质是是一个关于有限状态自动机的算法，但是在这里体现得不明显，在另一篇关于KMP算法的有限自动机问题的博文里，我会详细表述一下。本文的问题解答，因为涉及递推，一开始不是很好理解，没什么捷径，自己多看代码，多画图，来几遍有感觉了，自然就会理解的。如果你发现了bug，或者有自己的想法和优化方案，请给博主发邮件，或者在评论区戳我，感谢阅读(′▽`〃)</p><h4 id="参考">参考</h4><p><a href="https://www.ptpress.com.cn/shopping/buy?bookId=d7ee2bb8-dcb8-4029-8156-0b65d962f18a" target="_blank" rel="noopener">编程之法 面试和算法心得</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;经典字符串算法-最大相同前缀后缀问题&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;这个是学习KMP算法的前置问题，已经有几十年历史了&lt;br&gt;
本质是个很经典的有限状态机&lt;br&gt;
我看过很多关于这个问题的博客，要么是特别长根本看不懂，要么根本就是错的，所以我决定自己写一篇，中间解释部分有点长，喜欢直接看源码可以直接翻到源码那个节，算法比较难理解，但是实现代码就一点点，很短很巧妙&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="经典算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>经典算法题解-最小值栈</title>
    <link href="http://yoursite.com/2020/05/29/algorithm/exercise/question-min-num-of-stack/"/>
    <id>http://yoursite.com/2020/05/29/algorithm/exercise/question-min-num-of-stack/</id>
    <published>2020-05-29T09:00:00.000Z</published>
    <updated>2021-07-22T01:19:58.365Z</updated>
    
    <content type="html"><![CDATA[<h1>经典算法题解-最小值栈</h1><blockquote><p>题目来源：最早是在念高中时看见这个题目的，具体来源已经不晓得了，网上流传了很多版本<br>题目难度：简单</p></blockquote><a id="more"></a><h4 id="问题描述">问题描述</h4><p>问题很简单就一句话，实现一个带有最小值min()方法的栈，且要求耗时O(1)</p><h4 id="问题分析">问题分析</h4><p>我是在高二暑假的一个训练营第一次看到这个问题的，这个问题属于那种“只有想不到，想到了就很容易”的问题。我当时拿到问题的第一个想法，就是在栈上设置一个min_value属性，但是很快问题就来了，如果这个min_value被栈pop了，这个属性就失效了，所以不可以单纯使用一个属性去记录。同样的问题要求时复为O(1)，所以也不可能将栈整个翻出来再找最小值</p><p>虽然设置属性不可行，但是重点已经出来了，对于栈这种单端数据操作的数据结构，需要设置一个记录型结构，存储每个状态下的min_value才行，比如栈内数据[2,7,6,3,1]的min=1，pop一次尾部后有[2,7,6,3]的min=2，这里其实自然而然想到辅助栈（栈本身就是一个记录型结构），在此给出方案A</p><h6 id="1-辅助栈">1. 辅助栈</h6><p>直接上图，对于入栈队列[3,2,7,6,1]，左侧为主栈，右侧为辅助栈，栈顶在上：<br><img src="/images/algorithm/aux_stack1.png" title="aux_stack" alt="aux_stack" style="max-width:60%;margin:auto;" /><br>完整的元素变化流程如下：<br><img src="/images/algorithm/aux_stack1_1.png" title="aux_stack" alt="aux_stack" style="max-width:90%;margin:auto;" /><br>观察右侧的辅助栈，其中每个元素都是对应左侧主栈中同层次-&gt;栈底的元素中的最小值，对主栈的读写会影响辅助栈的读写：</p><ol><li>主栈push一个新元素a，辅助站将a与当前min比较，如a&lt;min，则辅助栈push a，否则辅助栈push min</li><li>主栈pop一个元素b，辅助栈跟随主栈，无条件pop一个元素c</li><li>辅助栈当前的栈顶元素就是主栈当前的最小值</li></ol><p>Java的实例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuxedStack</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 分别设置主栈和辅助栈</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; main;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; aux;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuxedStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        main = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        aux = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 和当前最小值比较，若小则辅助栈push新值，否则复制一次当前最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Integer i)</span> </span>&#123;</span><br><span class="line">        main.push(i);</span><br><span class="line">        <span class="keyword">if</span> (aux.isEmpty() || i &lt; aux.peek()) &#123;</span><br><span class="line">            aux.push(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            aux.push(aux.peek());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// pop时主辅栈一起弹出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        aux.pop();</span><br><span class="line">        <span class="keyword">return</span> main.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 辅助栈的顶元素就是当前最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aux.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其它的一些基本方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> main.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> main.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> main.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里我图省事，就直接封装了JDK提供的Stack类<br>辅助栈其实还有优化空间，比如在本例给出的入栈序列[3,2,7,6,1]中，辅助栈为[1,2,2,2,3]，其中的2出现了3次，是可以压缩的，这里为了清楚展示代码没有这么处理<br>使用辅助栈的时间复杂度O(1)，空间为O(N)</p></blockquote><h6 id="2-差异栈">2. 差异栈</h6><p>辅助栈是一种不错的方案，但是会占据额外空间，似乎不是让人很满意，所以使用差异栈就成了另一种方案，差异栈在使用上不占额外空间。让我们把目光放回题目上，题目要求的是返回栈的最小值，且要求时耗是O(1)，其实这里很容易和栈本身的性质联系起来，栈顶元素的读写本身就是O(1)啊，所以出现了一个疑问，有没有什么方法可以把每个阶段的最小值放当时的栈顶？</p><p>在这里介绍一下差异栈（下图右侧），在普通栈（下图左侧）中，每个节点存储的都是原始数据，但是差异栈在存储数据时会有额外处理，栈顶之外的元素存储的不是原始数据，而是和当时的栈顶元素的差值：<br><img src="/images/algorithm/aux_stack2.png" title="aux_stack" alt="aux_stack" style="max-width:80%;margin:auto;" /><br>差异栈这种结构一开始只是为了方便记录地图上坐标之间的差值而设计的，结果后来发现了很多其它的作用，比如差异栈在本题中稍作变形即可，具体方案如下：</p><ol><li>设置一个差异栈</li><li>允许同时操作栈的前两位</li><li>差异栈顶保存最小元素</li><li>push一个新元素，如果比当前栈顶元素小，则新元素成为新栈顶，原栈顶计算差值，成为第二元素；如果比当前栈顶大，则直接计算差值下压至第二位</li><li>pop时，直接越过栈顶元素看第二元素，如果第二元素小于零，说明本次pop的是最小元素（也就是栈顶元素本身），弹出栈顶元素，并还原差值，第二元素成为新栈顶；如果大于零，说明本次pop的是一个普通数值，还原差值后，直接弹出第二元素，栈顶保持不变（当前栈最小值不变）</li></ol><p>依旧是入栈序列[3,2,7,6,1]，普通情况下的栈元素变化如下：<br><img src="/images/algorithm/diff_stack1_1.png" title="diff_stack" alt="diff_stack" style="max-width:80%;margin:auto;" /><br>使用差异栈push情况下的栈元素变化（红色为新元素）：<br><img src="/images/algorithm/diff_stack2_1.png" title="diff_stack" alt="diff_stack" style="max-width:80%;margin:auto;" /><br>使用差异栈pop情况下的栈元素变化（红色为出栈<strong>数据</strong>，比如在pop=6时，通过栈顶元素2+第二元素4，还原出原值6并弹出，然后最小值2不变，依旧在栈顶）：<br><img src="/images/algorithm/diff_stack3.png" title="diff_stack" alt="diff_stack" style="max-width:80%;margin:auto;" /><br>这里给出相关的C++实现代码（比我用Java写的更清楚），如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; elem)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">min</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;T&gt; s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> minStack&lt;T&gt;::push(<span class="keyword">const</span> T&amp;elem)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        s.push(elem);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    T minval = s.top();</span><br><span class="line">    s.pop();</span><br><span class="line">    s.push(elem-minval);</span><br><span class="line">    <span class="keyword">if</span>(elem &lt; minval)</span><br><span class="line">    &#123;</span><br><span class="line">        s.push(elem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        s.push(minval);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T minStack&lt;T&gt;::pop()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.empty())</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(<span class="string">"stack is empty"</span>);</span><br><span class="line">    T minval = s.top();</span><br><span class="line">    s.pop();</span><br><span class="line">    T val = s.top();</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="keyword">if</span>(val &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s.push(minval - val);</span><br><span class="line">        val = minval;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s.push(minval);</span><br><span class="line">        val = minval+val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果想看Java实例的在评论区戳我<br>使用差异栈不占用任何额外空间</p></blockquote><h4 id="一点碎碎念">一点碎碎念</h4><img src="/images/algorithm/另一种双栈.png" title="另一种双栈" alt="另一种双栈" style="max-width:70%;margin:auto;" />这个是leetcode上一个老兄写的，原文在此[单变量标记当前最小元素解题](https://leetcode-cn.com/problems/min-stack-lcci/solution/dan-bian-liang-biao-ji-dang-qian-zui-xiao-yuan-su-/)，代码我就不贴了，原文链接里有，如果我没理解错的话，这个方案出来的图如下：<img src="/images/algorithm/另一种双栈2.png" title="另一种双栈2" alt="另一种双栈2" style="max-width:70%;margin:auto;" />看完这个图基本就可以理解了，这种方案就是就是把压缩过长度的辅助栈融合到了主栈里，可以看到我在最右侧画的示意图，其实这就是一种变形了的双栈结构<h4 id="两点碎碎念">两点碎碎念</h4><p>在第一次接触差异栈的时候会觉得很奇怪，疑惑为什么要这么写，其实只要自己实现一次，就能很轻松理解其中的关系，差异值不是单纯的一个差值，它其实还表示了当前元素和栈顶元素（栈最小值的关系），这种关系的来源其实是上文辅助栈那张完整流程图中蓝色部分，也就是最小值滞留的体现，在未遇到比当前值还小的数值时，最小值是不变的，所以可以单纯用一个差值正负性来区别</p><p>下图是我们前文用过的双栈结构，其中左侧为主栈，主栈的每个栈元素就是数据本身，也就是每个栈元素只携带了一个信息（原始数值），但是对于差异栈来说，其中的每个栈元素也是一个数值，但其实携带了两个信息（原始数值和该数值与最小值的<strong>关系</strong>），所以我们可以用一个栈表示双栈法中需要两个栈才能表达的信息</p><p>这是双栈法：<br><img src="/images/algorithm/aux_stack1.png" title="aux_stack" alt="aux_stack" style="max-width:60%;margin:auto;" /><br>这里对双栈结构加一点东西，看完这个图，各位应该心里有数了，差异栈是一个主从复合栈，本身在结构上，就同时拥有了主栈和辅助栈上存在的两类信息：<br><img src="/images/algorithm/三个栈.png" title="3_stacks" alt="3_stacks" style="max-width:60%;margin:auto;" /></p><h4 id="总结">总结</h4><p>时刻记住栈是一种记录型结构，以及差异栈这种特殊的栈变种，有时候可以在特定问题中发挥作用</p><p>如果你发现了bug，或者有自己的想法，请给博主发邮件，或者在评论区戳我，感谢阅读(′▽`〃)</p><h4 id="参考">参考</h4><p><a href="https://www.cnblogs.com/cane/p/3793510.html" target="_blank" rel="noopener">面试金典–MIN栈的实现</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;经典算法题解-最小值栈&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;题目来源：最早是在念高中时看见这个题目的，具体来源已经不晓得了，网上流传了很多版本&lt;br&gt;
题目难度：简单&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法题解" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="习题" scheme="http://yoursite.com/tags/%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>经典算法题解-两数之和</title>
    <link href="http://yoursite.com/2020/05/29/algorithm/exercise/question-sum-of-two-numbers/"/>
    <id>http://yoursite.com/2020/05/29/algorithm/exercise/question-sum-of-two-numbers/</id>
    <published>2020-05-29T09:00:00.000Z</published>
    <updated>2021-07-22T01:19:58.367Z</updated>
    
    <content type="html"><![CDATA[<h1>经典算法题解-两数之和</h1><blockquote><p>题目来源：<a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">LeetCode-两数之和</a><br>题目难度：简单</p></blockquote><a id="more"></a><h4 id="问题描述">问题描述</h4><p>给定一个整数数组nums和一个目标值target，请你在该数组中找出和为目标值的那<strong>两个</strong>整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍</p><p>示例：</p><ol><li>给定 nums = [2, 7, 11, 15], target = 9</li><li>因为 nums[0] + nums[1] = 2 + 7 = 9</li><li>所以返回 [0, 1]</li></ol><h4 id="问题分析">问题分析</h4><p>这个问题在理解上没有什么难点，主要就是给定一个数组和一个目标数target，其中每个元素至多使用一次，要求找到两个元素A和B，使得它们的和正好等于给定的target，返回这两个适格数字的下标。题目已经假定每个数组和target的组合只有有一个正确答案</p><p>题目很好理解，解法也很容易，直接双重for循环就可以解：</p><h6 id="1-双重for循环">1. 双重for循环</h6><p>直接看代码，这里给出Java的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="comment">// 第一轮遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 第二轮遍历不能重复计算了</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    <span class="comment">// 注意leetcode原题中要求返回的是索引位置</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度O(N^2)，空间复杂度O(1)</p></blockquote><p>上面这个双重for循环算法，先使用变量i遍历目标数组，然后对于每个元素，再追加遍历其位置至数组尾部的所有元素（因为之前的元素已经在i之前的遍历中比较过了），最终计算出相关位置。因为是双重for循环，所以很容易就可以计算出时间复杂度O(N^2)，空间复杂度O(1)</p><h6 id="2-字典遍历法">2. 字典遍历法</h6><p>双重for循环虽然很容易想到，但是O(N^2)的时间代价明显不太行，所以考虑对其进行一些优化，对于优化，我们常见的策略有3种：</p><ul><li>减少冗余计算</li><li>采用特殊数据结构</li><li>时间换空间</li></ul><p>回到我们的题目上，假设有这么一个数组[6, 4, 1, 3, 7, 8, 9]，且目标数target=17，那我们可以发现，对于9之前的[6, 4, 1, 3, 7, 8]，其实每个数字在遍历时，都和9进行了一次比较，知道8+9=17才结束，这期间9其实被使用了6次，这明显是冗余了</p><p>所以我们希望有这么一个策略，在我们顺序遍历取得一个数num1的时候，就知道和它配对的数target-num1是否在我们的nums里面，并且不单单只存在一个。比如说target为4，nums为[2,3]，假设我们此时取得的num1为2，那么和它配对的2确实在nums中，但是数字2在nums中只出现了一次，我们无法取得两次，所以也是不行的。因此我们最终获得了以下步骤：</p><ol><li>建立字典lookup存放第一个数字，并存放该数字的index</li><li>判断lookup中是否存在(target-当前数字cur)， 则当前值cur和某个lookup中的key值相加之和为target</li><li>如果存在，则返回：(target-当前数字cur)的index与当前值cur的index</li><li>如果不存在则将当前数字cur为key，当前数字的index为值存入lookup，继续计算下一个数</li></ol><p>这里给出Java的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 将原本为两个目标值切换为一个目标值，只需要每次从 map 中寻找目标值即可</span></span><br><span class="line">            <span class="keyword">int</span> num = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(num)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(num), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 每次遍历过的值都存储到 map 中，这样之后就能从 map 中寻找需要的目标值</span></span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度O(N)，空间复杂度O(N)</p></blockquote><p>这个算法改造，完整使用了我们上述3个改进策略，使用散列存储已经匹配过的结果，而且由于数据结构特性，散列表的读取都是O(1)（采用特殊数据结构），虽然读取快了，但是散列表本身会占据内存（时间换空间），采用散列之后，原本的双重for循环变成了一重（减少冗余计算），最终的时空复杂度均为O(N)，从代价上看明显小于原来的时间O(N^2)</p><h4 id="一点碎碎念">一点碎碎念</h4><img src="/images/algorithm/两数之和.jpg" title="两数之和错例" alt="两数之和错例" style="max-width:95%;margin:auto;" /><p>上面这个图是我在一个前端群里看见的，图的作者原话是说自己的题解消耗有点大。稍微看一下代码，这个小老弟虽然只写了一层循环，乍一看代码还挺干净，但其实indexOf()方法本身也是一个遍历操作，所以在执行方面，这个其实还是一个双重for循环的做法，虽然本题非常简单，但是这个小老弟的写法还是提醒我们，在构建算法的时候，一定要小心局部的一些处理，很有可能随手一些，性能就打了折扣，尤其是构建一些复杂算法时，局部的细节处理一定要到位</p><h4 id="总结">总结</h4><p>本题属于简单题，实现上很简单，本篇也给出了对应的Java代码实例，同时一个老兄的代码给我们提了个醒，性能的折扣很有可能出现在一些微小的地方。唯一需要注意的是，在考虑给算法优化的时候，最基本的3点策略还是：</p><ul><li>减少冗余计算</li><li>采用特殊数据结构</li><li>时间换空间</li></ul><p>如果你发现了bug，或者有自己的想法，请给博主发邮件，或者在评论区戳我，感谢阅读(′▽`〃)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;经典算法题解-两数之和&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode-两数之和&lt;/a&gt;&lt;br&gt;
题目难度：简单&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法题解" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="习题" scheme="http://yoursite.com/tags/%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>经典算法题解-汉诺塔</title>
    <link href="http://yoursite.com/2020/04/16/algorithm/exercise/question-recursion-hanoi/"/>
    <id>http://yoursite.com/2020/04/16/algorithm/exercise/question-recursion-hanoi/</id>
    <published>2020-04-16T06:00:21.000Z</published>
    <updated>2021-07-22T01:19:58.366Z</updated>
    
    <content type="html"><![CDATA[<h1>递归算法实现汉诺塔</h1><a id="more"></a><h4 id="代码实例">代码实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.blade.exercise.recursion.hanoi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer callCount = <span class="number">0</span>;   <span class="comment">// 空间复杂度计数器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer moveCount = <span class="number">0</span>;   <span class="comment">// 时间复杂度计数器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把from栈上n个元素移植到to栈上</span></span><br><span class="line"><span class="comment">     * 从src上的n个元素中，取出n-1移动到aux上</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(Stack&lt;Integer&gt; src, Stack&lt;Integer&gt; des, Stack&lt;Integer&gt; aux, Integer num)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计数器和日志型输出</span></span><br><span class="line">        callCount++;</span><br><span class="line">        System.out.println(<span class="string">"move "</span>+(num)+<span class="string">" elements form src."</span>+ src +<span class="string">" to des."</span> + des + <span class="string">" with aux."</span> + aux);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            moveCount++;</span><br><span class="line">            des.push(src.pop());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 递归核心，大问题依赖小问题的解决，会有空间延伸</span></span><br><span class="line">            move(src, aux, des, num-<span class="number">1</span>); <span class="comment">// 移动n-1的上层建筑到辅助柱</span></span><br><span class="line">            move(src, des, aux, <span class="number">1</span>);     <span class="comment">// 移动底盘到目标柱</span></span><br><span class="line">            move(aux, des, src, num-<span class="number">1</span>); <span class="comment">// 移动n-1的上层建筑回到目标柱上的底盘上</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Integer&gt; src = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; aux = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; des = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        src.push(<span class="number">5</span>);</span><br><span class="line">        src.push(<span class="number">4</span>);</span><br><span class="line">        src.push(<span class="number">3</span>);</span><br><span class="line">        src.push(<span class="number">2</span>);</span><br><span class="line">        src.push(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"src stack: "</span> + src + <span class="string">"\ndes stack: "</span> + des +<span class="string">"\naux stack: "</span> + aux);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"********************* Start To Move Elements **********************"</span>);</span><br><span class="line">        move(src, des, aux, src.size());</span><br><span class="line">        System.out.println(<span class="string">"********************* Stop To Move Elements **********************"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"total call count: "</span> + callCount + <span class="string">" times"</span>);</span><br><span class="line">        System.out.println(<span class="string">"total move count: "</span> + moveCount + <span class="string">" times, equals to -1+2^n"</span>);</span><br><span class="line">        System.out.println(<span class="string">"src stack: "</span> + src + <span class="string">"\ndes stack: "</span> + des +<span class="string">"\naux stack: "</span> + aux);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码中的日志型输出可以一律清除</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;递归算法实现汉诺塔&lt;/h1&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法题解" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
</feed>
